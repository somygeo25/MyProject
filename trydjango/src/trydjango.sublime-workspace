{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "/home/deekshith/Downloads/Test JSON.json",
			"settings":
			{
				"buffer_size": 817,
				"line_ending": "Unix"
			}
		},
		{
			"file": "products/models.py",
			"settings":
			{
				"buffer_size": 803,
				"line_ending": "Unix"
			}
		},
		{
			"file": "products/apps.py",
			"settings":
			{
				"buffer_size": 91,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 1509 files for \"forms\"\n\n/home/deekshith/Dev/trydjango/lib/python3.6/functools.py:\n  751      \"\"\"Single-dispatch generic function decorator.\n  752  \n  753:     Transforms a function into a generic function, which can have different\n  754      behaviours depending upon the type of its first argument. The decorated\n  755      function acts as the default implementation, and additional\n\n/home/deekshith/Dev/trydjango/lib/python3.6/hashlib.py:\n   23  \n   24  Choose your hash function wisely.  Some have known collision weaknesses.\n   25: sha384 and sha512 will be slow on 32 bit platforms.\n   26  \n   27  Hash objects have these methods:\n\n/home/deekshith/Dev/trydjango/lib/python3.6/heapq.py:\n   12  item = heappop(heap) # pops the smallest item from the heap\n   13  item = heap[0]       # smallest item on the heap without popping it\n   14: heapify(x)           # transforms list into a heap, in-place, in linear time\n   15  item = heapreplace(heap, item) # pops and returns smallest item, and adds\n   16                                 # new item; the heap size is unchanged\n\n/home/deekshith/Dev/trydjango/lib/python3.6/locale.py:\n  522          in the way described above.\n  523  \n  524:         To maintain compatibility with other platforms, not only the\n  525          LANG variable is tested, but a list of variables given as\n  526          envvars parameter. The first found to be defined will be\n\n/home/deekshith/Dev/trydjango/lib/python3.6/ntpath.py:\n  358  \n  359  def expandvars(path):\n  360:     \"\"\"Expand shell variables of the forms $var, ${var} and %var%.\n  361  \n  362      Unknown variables are left unchanged.\"\"\"\n\n/home/deekshith/Dev/trydjango/lib/python3.6/os.py:\n   16  \n   17  Programs that import and use 'os' stand a better chance of being\n   18: portable between different platforms.  Of course, they must then\n   19: only use functions that are defined by all platforms (e.g., unlink\n   20  and opendir), and leave all pathname manipulation to os.path\n   21  (e.g., split and join).\n   ..\n  142      _set = set()\n  143      _add(\"HAVE_FACCESSAT\",  \"access\")\n  144:     # Some platforms don't support lchmod().  Often the function exists\n  145      # anyway, as a stub that always returns ENOSUP or perhaps EOPNOTSUPP.\n  146      # (No, I don't know why that's a good design.)  ./configure will detect\n  147      # this and reject it--so HAVE_LCHMOD still won't be defined on such\n  148:     # platforms.  This is Very Helpful.\n  149      #\n  150:     # However, sometimes platforms without a working lchmod() *do* have\n  151      # fchmodat().  (Examples: Linux kernel 3.2 with glibc 2.15,\n  152      # OpenIndiana 3.x.)  And fchmodat() has a flag that theoretically makes\n\n/home/deekshith/Dev/trydjango/lib/python3.6/posixpath.py:\n  277  \n  278  # Expand paths containing shell variable substitutions.\n  279: # This expands the forms $variable and ${variable} only.\n  280  # Non-existent variables are left unchanged.\n  281  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/shutil.py:\n   90              return False\n   91  \n   92:     # All other platforms: check for same pathname.\n   93      return (os.path.normcase(os.path.abspath(src)) ==\n   94              os.path.normcase(os.path.abspath(dst)))\n   ..\n  293      You can set the optional ignore_dangling_symlinks flag to true if you\n  294      want to silence this exception. Notice that this has no effect on\n  295:     platforms that don't support os.symlink.\n  296  \n  297      The optional ignore argument is a callable. If given, it\n  ...\n 1099  def which(cmd, mode=os.F_OK | os.X_OK, path=None):\n 1100      \"\"\"Given a command, mode, and a PATH string, return the path which\n 1101:     conforms to the given mode on the PATH, or None if there is no such\n 1102      file.\n 1103  \n ....\n 1144              files = [cmd + ext for ext in pathext]\n 1145      else:\n 1146:         # On other platforms you don't have things like PATHEXT to tell you\n 1147          # what file suffixes are executable, so just pass on cmd as-is.\n 1148          files = [cmd]\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site.py:\n   15  appends lib/python<version>/site-packages as well as lib/site-python.\n   16  It also supports the Debian convention of\n   17: lib/python<version>/dist-packages.  On other platforms (mainly Mac and\n   18  Windows), it uses just sys.prefix (and sys.exec_prefix, if different,\n   19  but this is unlikely).  The resulting directories, if they exist, are\n\n/home/deekshith/Dev/trydjango/lib/python3.6/sre_compile.py:\n  395      Generate an overlap table for the following prefix.\n  396      An overlap table is a table of the same size as the prefix which\n  397:     informs about the potential self-overlap for each index in the prefix:\n  398      - if overlap[i] == 0, prefix[i:] can't overlap prefix[0:...]\n  399      - if overlap[i] == k with 0 < k <= i, prefix[i-k+1:i+1] overlaps with\n\n/home/deekshith/Dev/trydjango/lib/python3.6/encodings/cp864.py:\n   52      0x0083: 0x221a,     #  SQUARE ROOT\n   53      0x0084: 0x2592,     #  MEDIUM SHADE\n   54:     0x0085: 0x2500,     #  FORMS LIGHT HORIZONTAL\n   55:     0x0086: 0x2502,     #  FORMS LIGHT VERTICAL\n   56:     0x0087: 0x253c,     #  FORMS LIGHT VERTICAL AND HORIZONTAL\n   57:     0x0088: 0x2524,     #  FORMS LIGHT VERTICAL AND LEFT\n   58:     0x0089: 0x252c,     #  FORMS LIGHT DOWN AND HORIZONTAL\n   59:     0x008a: 0x251c,     #  FORMS LIGHT VERTICAL AND RIGHT\n   60:     0x008b: 0x2534,     #  FORMS LIGHT UP AND HORIZONTAL\n   61:     0x008c: 0x2510,     #  FORMS LIGHT DOWN AND LEFT\n   62:     0x008d: 0x250c,     #  FORMS LIGHT DOWN AND RIGHT\n   63:     0x008e: 0x2514,     #  FORMS LIGHT UP AND RIGHT\n   64:     0x008f: 0x2518,     #  FORMS LIGHT UP AND LEFT\n   65      0x0090: 0x03b2,     #  GREEK SMALL BETA\n   66      0x0091: 0x221e,     #  INFINITY\n   ..\n  310      '\\u221a'   #  0x0083 -> SQUARE ROOT\n  311      '\\u2592'   #  0x0084 -> MEDIUM SHADE\n  312:     '\\u2500'   #  0x0085 -> FORMS LIGHT HORIZONTAL\n  313:     '\\u2502'   #  0x0086 -> FORMS LIGHT VERTICAL\n  314:     '\\u253c'   #  0x0087 -> FORMS LIGHT VERTICAL AND HORIZONTAL\n  315:     '\\u2524'   #  0x0088 -> FORMS LIGHT VERTICAL AND LEFT\n  316:     '\\u252c'   #  0x0089 -> FORMS LIGHT DOWN AND HORIZONTAL\n  317:     '\\u251c'   #  0x008a -> FORMS LIGHT VERTICAL AND RIGHT\n  318:     '\\u2534'   #  0x008b -> FORMS LIGHT UP AND HORIZONTAL\n  319:     '\\u2510'   #  0x008c -> FORMS LIGHT DOWN AND LEFT\n  320:     '\\u250c'   #  0x008d -> FORMS LIGHT DOWN AND RIGHT\n  321:     '\\u2514'   #  0x008e -> FORMS LIGHT UP AND RIGHT\n  322:     '\\u2518'   #  0x008f -> FORMS LIGHT UP AND LEFT\n  323      '\\u03b2'   #  0x0090 -> GREEK SMALL BETA\n  324      '\\u221e'   #  0x0091 -> INFINITY\n  ...\n  603      0x221e: 0x0091,     #  INFINITY\n  604      0x2248: 0x0096,     #  ALMOST EQUAL TO\n  605:     0x2500: 0x0085,     #  FORMS LIGHT HORIZONTAL\n  606:     0x2502: 0x0086,     #  FORMS LIGHT VERTICAL\n  607:     0x250c: 0x008d,     #  FORMS LIGHT DOWN AND RIGHT\n  608:     0x2510: 0x008c,     #  FORMS LIGHT DOWN AND LEFT\n  609:     0x2514: 0x008e,     #  FORMS LIGHT UP AND RIGHT\n  610:     0x2518: 0x008f,     #  FORMS LIGHT UP AND LEFT\n  611:     0x251c: 0x008a,     #  FORMS LIGHT VERTICAL AND RIGHT\n  612:     0x2524: 0x0088,     #  FORMS LIGHT VERTICAL AND LEFT\n  613:     0x252c: 0x0089,     #  FORMS LIGHT DOWN AND HORIZONTAL\n  614:     0x2534: 0x008b,     #  FORMS LIGHT UP AND HORIZONTAL\n  615:     0x253c: 0x0087,     #  FORMS LIGHT VERTICAL AND HORIZONTAL\n  616      0x2592: 0x0084,     #  MEDIUM SHADE\n  617      0x25a0: 0x00fe,     #  BLACK SQUARE\n\n/home/deekshith/Dev/trydjango/lib/python3.6/importlib/_bootstrap_external.py:\n   22  \n   23  # Bootstrap-related code ######################################################\n   24: _CASE_INSENSITIVE_PLATFORMS_STR_KEY = 'win',\n   25: _CASE_INSENSITIVE_PLATFORMS_BYTES_KEY = 'cygwin', 'darwin'\n   26: _CASE_INSENSITIVE_PLATFORMS =  (_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY\n   27:                                 + _CASE_INSENSITIVE_PLATFORMS_STR_KEY)\n   28  \n   29  \n   30  def _make_relax_case():\n   31:     if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS):\n   32:         if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS_STR_KEY):\n   33              key = 'PYTHONCASEOK'\n   34          else:\n   ..\n 1307                  lower_suffix_contents.add(new_name)\n 1308              self._path_cache = lower_suffix_contents\n 1309:         if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS):\n 1310              self._relaxed_path_cache = {fn.lower() for fn in contents}\n 1311  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/conf/global_settings.py:\n  217  \n  218  # Default form rendering class.\n  219: FORM_RENDERER = 'django.forms.renderers.DjangoTemplates'\n  220  \n  221  # Default email address to use for various automated correspondence from\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/admin/checks.py:\n   11  from django.db.models.constants import LOOKUP_SEP\n   12  from django.db.models.expressions import Combinable, F, OrderBy\n   13: from django.forms.models import (\n   14:     BaseModelForm, BaseModelFormSet, _get_foreign_key,\n   15  )\n   16  from django.template.engine import Engine\n   ..\n  920          errors.extend(self._check_max_num(inline_obj))\n  921          errors.extend(self._check_min_num(inline_obj))\n  922:         errors.extend(self._check_formset(inline_obj))\n  923          return errors\n  924  \n  ...\n  988              return []\n  989  \n  990:     def _check_formset(self, obj):\n  991:         \"\"\" Check formset is a subclass of BaseModelFormSet. \"\"\"\n  992  \n  993:         if not issubclass(obj.formset, BaseModelFormSet):\n  994:             return must_inherit_from(parent='BaseModelFormSet', option='formset', obj=obj, id='admin.E206')\n  995          else:\n  996              return []\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/admin/forms.py:\n    1: from django import forms\n    2: from django.contrib.auth.forms import AuthenticationForm, PasswordChangeForm\n    3  from django.utils.translation import gettext_lazy as _\n    4  \n    .\n   18      def confirm_login_allowed(self, user):\n   19          if not user.is_active or not user.is_staff:\n   20:             raise forms.ValidationError(\n   21                  self.error_messages['invalid_login'],\n   22                  code='invalid_login',\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/admin/helpers.py:\n    1  import json\n    2  \n    3: from django import forms\n    4  from django.conf import settings\n    5  from django.contrib.admin.utils import (\n    .\n    9  from django.core.exceptions import ObjectDoesNotExist\n   10  from django.db.models.fields.related import ManyToManyRel\n   11: from django.forms.utils import flatatt\n   12  from django.template.defaultfilters import capfirst, linebreaksbr\n   13  from django.utils.html import conditional_escape, format_html\n   ..\n   18  \n   19  \n   20: class ActionForm(forms.Form):\n   21:     action = forms.ChoiceField(label=_('Action:'))\n   22:     select_across = forms.BooleanField(\n   23          label='',\n   24          required=False,\n   25          initial=0,\n   26:         widget=forms.HiddenInput({'class': 'select-across'}),\n   27      )\n   28  \n   29  \n   30: checkbox = forms.CheckboxInput({'class': 'action-select'}, lambda value: False)\n   31  \n   32  \n   ..\n   87                  'collapse%s.js' % extra,\n   88              ]\n   89:             return forms.Media(js=['admin/js/%s' % url for url in js])\n   90:         return forms.Media()\n   91  \n   92      def __iter__(self):\n   ..\n   97  class Fieldline:\n   98      def __init__(self, form, field, readonly_fields=None, model_admin=None):\n   99:         self.form = form  # A django.forms.Form instance\n  100          if not hasattr(field, \"__iter__\") or isinstance(field, str):\n  101              self.fields = [field]\n  ...\n  128  class AdminField:\n  129      def __init__(self, form, field, is_first):\n  130:         self.field = form[field]  # A django.forms.BoundField instance\n  131          self.is_first = is_first  # Whether this field is first on the line\n  132:         self.is_checkbox = isinstance(self.field.field.widget, forms.CheckboxInput)\n  133          self.is_readonly = False\n  134  \n  ...\n  221  \n  222  \n  223: class InlineAdminFormSet:\n  224      \"\"\"\n  225:     A wrapper around an inline formset for use in the admin system.\n  226      \"\"\"\n  227:     def __init__(self, inline, formset, fieldsets, prepopulated_fields=None,\n  228                   readonly_fields=None, model_admin=None):\n  229          self.opts = inline\n  230:         self.formset = formset\n  231          self.fieldsets = fieldsets\n  232          self.model_admin = model_admin\n  ...\n  240  \n  241      def __iter__(self):\n  242:         for form, original in zip(self.formset.initial_forms, self.formset.get_queryset()):\n  243              view_on_site_url = self.opts.get_view_on_site_url(original)\n  244              yield InlineAdminForm(\n  245:                 self.formset, form, self.fieldsets, self.prepopulated_fields,\n  246                  original, self.readonly_fields, model_admin=self.opts,\n  247                  view_on_site_url=view_on_site_url,\n  248              )\n  249:         for form in self.formset.extra_forms:\n  250              yield InlineAdminForm(\n  251:                 self.formset, form, self.fieldsets, self.prepopulated_fields,\n  252                  None, self.readonly_fields, model_admin=self.opts,\n  253              )\n  254          yield InlineAdminForm(\n  255:             self.formset, self.formset.empty_form,\n  256              self.fieldsets, self.prepopulated_fields, None,\n  257              self.readonly_fields, model_admin=self.opts,\n  ...\n  259  \n  260      def fields(self):\n  261:         fk = getattr(self.formset, \"fk\", None)\n  262          for i, field_name in enumerate(flatten_fieldsets(self.fieldsets)):\n  263              if fk and fk.name == field_name:\n  ...\n  271                  }\n  272              else:\n  273:                 form_field = self.formset.empty_form.fields[field_name]\n  274                  label = form_field.label\n  275                  if label is None:\n  ...\n  282                  }\n  283  \n  284:     def inline_formset_data(self):\n  285          verbose_name = self.opts.verbose_name\n  286          return json.dumps({\n  287:             'name': '#%s' % self.formset.prefix,\n  288              'options': {\n  289:                 'prefix': self.formset.prefix,\n  290                  'addText': gettext('Add another %(verbose_name)s') % {\n  291                      'verbose_name': capfirst(verbose_name),\n  ...\n  296  \n  297      @property\n  298:     def forms(self):\n  299:         return self.formset.forms\n  300  \n  301      @property\n  302      def non_form_errors(self):\n  303:         return self.formset.non_form_errors\n  304  \n  305      @property\n  306      def media(self):\n  307:         media = self.opts.media + self.formset.media\n  308          for fs in self:\n  309              media = media + fs.media\n  ...\n  315      A wrapper around an inline form for use in the admin system.\n  316      \"\"\"\n  317:     def __init__(self, formset, form, fieldsets, prepopulated_fields, original,\n  318                   readonly_fields=None, model_admin=None, view_on_site_url=None):\n  319:         self.formset = formset\n  320          self.model_admin = model_admin\n  321          self.original = original\n  ...\n  327          for name, options in self.fieldsets:\n  328              yield InlineFieldset(\n  329:                 self.formset, self.form, name, self.readonly_fields,\n  330                  model_admin=self.model_admin, **options\n  331              )\n  ...\n  343  \n  344      def pk_field(self):\n  345:         return AdminField(self.form, self.formset._pk_field.name, False)\n  346  \n  347      def fk_field(self):\n  348:         fk = getattr(self.formset, \"fk\", None)\n  349          if fk:\n  350              return AdminField(self.form, fk.name, False)\n  ...\n  353  \n  354      def deletion_field(self):\n  355:         from django.forms.formsets import DELETION_FIELD_NAME\n  356          return AdminField(self.form, DELETION_FIELD_NAME, False)\n  357  \n  358      def ordering_field(self):\n  359:         from django.forms.formsets import ORDERING_FIELD_NAME\n  360          return AdminField(self.form, ORDERING_FIELD_NAME, False)\n  361  \n  362  \n  363  class InlineFieldset(Fieldset):\n  364:     def __init__(self, formset, *args, **kwargs):\n  365:         self.formset = formset\n  366          super().__init__(*args, **kwargs)\n  367  \n  368      def __iter__(self):\n  369:         fk = getattr(self.formset, \"fk\", None)\n  370          for field in self.fields:\n  371              if fk and fk.name == field:\n  ...\n  374  \n  375  \n  376: class AdminErrorList(forms.utils.ErrorList):\n  377:     \"\"\"Store errors for the form/formsets in an add/change view.\"\"\"\n  378:     def __init__(self, form, inline_formsets):\n  379          super().__init__()\n  380  \n  381          if form.is_bound:\n  382              self.extend(form.errors.values())\n  383:             for inline_formset in inline_formsets:\n  384:                 self.extend(inline_formset.non_form_errors())\n  385:                 for errors_in_inline_form in inline_formset.errors:\n  386                      self.extend(errors_in_inline_form.values())\n  387  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/admin/options.py:\n    7  from urllib.parse import quote as urlquote\n    8  \n    9: from django import forms\n   10  from django.conf import settings\n   11  from django.contrib import messages\n   ..\n   33  from django.db.models.constants import LOOKUP_SEP\n   34  from django.db.models.fields import BLANK_CHOICE_DASH\n   35: from django.forms.formsets import DELETION_FIELD_NAME, all_valid\n   36: from django.forms.models import (\n   37:     BaseInlineFormSet, inlineformset_factory, modelform_defines_fields,\n   38:     modelform_factory, modelformset_factory,\n   39  )\n   40: from django.forms.widgets import CheckboxSelectMultiple, SelectMultiple\n   41  from django.http import HttpResponseRedirect\n   42  from django.http.response import HttpResponseBase\n   ..\n   79  FORMFIELD_FOR_DBFIELD_DEFAULTS = {\n   80      models.DateTimeField: {\n   81:         'form_class': forms.SplitDateTimeField,\n   82          'widget': widgets.AdminSplitDateTime\n   83      },\n   ..\n   97  \n   98  \n   99: class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n  100      \"\"\"Functionality common to both ModelAdmin and InlineAdmin.\"\"\"\n  101  \n  ...\n  105      exclude = None\n  106      fieldsets = None\n  107:     form = forms.ModelForm\n  108      filter_vertical = ()\n  109      filter_horizontal = ()\n  ...\n  387              if not getattr(field, 'get_path_info', None):\n  388                  # This is not a relational field, so further parts\n  389:                 # must be transforms.\n  390                  break\n  391              prev_field = field\n  ...\n  610              'vendor/xregexp/xregexp%s.js' % extra,\n  611          ]\n  612:         return forms.Media(js=['admin/js/%s' % url for url in js])\n  613  \n  614      def get_model_perms(self, request):\n  ...\n  664  \n  665          if defaults['fields'] is None and not modelform_defines_fields(defaults['form']):\n  666:             defaults['fields'] = forms.ALL_FIELDS\n  667  \n  668          try:\n  ...\n  724      def get_changelist_form(self, request, **kwargs):\n  725          \"\"\"\n  726:         Return a Form class for use in the Formset on the changelist page.\n  727          \"\"\"\n  728          defaults = {\n  ...\n  731          defaults.update(kwargs)\n  732          if defaults.get('fields') is None and not modelform_defines_fields(defaults.get('form')):\n  733:             defaults['fields'] = forms.ALL_FIELDS\n  734  \n  735          return modelform_factory(self.model, **defaults)\n  736  \n  737:     def get_changelist_formset(self, request, **kwargs):\n  738          \"\"\"\n  739:         Return a FormSet class for use on the changelist page if list_editable\n  740          is used.\n  741          \"\"\"\n  ...\n  744          }\n  745          defaults.update(kwargs)\n  746:         return modelformset_factory(\n  747              self.model, self.get_changelist_form(request), extra=0,\n  748              fields=self.list_editable, **defaults\n  749          )\n  750  \n  751:     def get_formsets_with_inlines(self, request, obj=None):\n  752          \"\"\"\n  753:         Yield formsets and the corresponding inlines.\n  754          \"\"\"\n  755          for inline in self.get_inline_instances(request, obj):\n  756:             yield inline.get_formset(request, obj), inline\n  757  \n  758      def get_paginator(self, request, queryset, per_page, orphans=0, allow_empty_first_page=True):\n  ...\n  983          return ''\n  984  \n  985:     def construct_change_message(self, request, form, formsets, add=False):\n  986          \"\"\"\n  987          Construct a JSON structure describing changes from a changed object.\n  988          \"\"\"\n  989:         return construct_change_message(form, formsets, add)\n  990  \n  991      def message_user(self, request, message, level=messages.INFO, extra_tags='',\n  ...\n 1033          obj.delete()\n 1034  \n 1035:     def save_formset(self, request, form, formset, change):\n 1036          \"\"\"\n 1037:         Given an inline formset save it to the database.\n 1038          \"\"\"\n 1039:         formset.save()\n 1040  \n 1041:     def save_related(self, request, form, formsets, change):\n 1042          \"\"\"\n 1043          Given the ``HttpRequest``, the parent ``ModelForm`` instance, the\n 1044:         list of inline formsets and a boolean value based on whether the\n 1045          parent is being added or changed, save the related objects to the\n 1046          database. Note that at this point save_form() and save_model() have\n ....\n 1048          \"\"\"\n 1049          form.save_m2m()\n 1050:         for formset in formsets:\n 1051:             self.save_formset(request, form, formset, change=change)\n 1052  \n 1053      def render_change_form(self, request, context, add=False, change=False, form_url='', obj=None):\n ....\n 1063              'has_change_permission': self.has_change_permission(request, obj),\n 1064              'has_delete_permission': self.has_delete_permission(request, obj),\n 1065:             'has_file_field': True,  # FIXME - this should check if form or formsets have a FileField,\n 1066              'has_absolute_url': view_on_site_url is not None,\n 1067              'absolute_url': view_on_site_url,\n ....\n 1283          \"\"\"\n 1284  \n 1285:         # There can be multiple action forms on the page (at the top\n 1286          # and bottom of the change list, for example). Get the action\n 1287          # whose button was pushed.\n ....\n 1405          )\n 1406  \n 1407:     def get_inline_formsets(self, request, formsets, inline_instances, obj=None):\n 1408:         inline_admin_formsets = []\n 1409:         for inline, formset in zip(inline_instances, formsets):\n 1410              fieldsets = list(inline.get_fieldsets(request, obj))\n 1411              readonly = list(inline.get_readonly_fields(request, obj))\n 1412              prepopulated = dict(inline.get_prepopulated_fields(request, obj))\n 1413:             inline_admin_formset = helpers.InlineAdminFormSet(\n 1414:                 inline, formset, fieldsets, prepopulated, readonly,\n 1415                  model_admin=self,\n 1416              )\n 1417:             inline_admin_formsets.append(inline_admin_formset)\n 1418:         return inline_admin_formsets\n 1419  \n 1420      def get_changeform_initial_data(self, request):\n ....\n 1487                  form_validated = False\n 1488                  new_object = form.instance\n 1489:             formsets, inline_instances = self._create_formsets(request, new_object, change=not add)\n 1490:             if all_valid(formsets) and form_validated:\n 1491                  self.save_model(request, new_object, form, not add)\n 1492:                 self.save_related(request, form, formsets, not add)\n 1493:                 change_message = self.construct_change_message(request, form, formsets, add)\n 1494                  if add:\n 1495                      self.log_addition(request, new_object, change_message)\n ....\n 1504                  initial = self.get_changeform_initial_data(request)\n 1505                  form = ModelForm(initial=initial)\n 1506:                 formsets, inline_instances = self._create_formsets(request, form.instance, change=False)\n 1507              else:\n 1508                  form = ModelForm(instance=obj)\n 1509:                 formsets, inline_instances = self._create_formsets(request, obj, change=True)\n 1510  \n 1511          adminForm = helpers.AdminForm(\n ....\n 1517          media = self.media + adminForm.media\n 1518  \n 1519:         inline_formsets = self.get_inline_formsets(request, formsets, inline_instances, obj)\n 1520:         for inline_formset in inline_formsets:\n 1521:             media = media + inline_formset.media\n 1522  \n 1523          context = dict(\n ....\n 1531              to_field=to_field,\n 1532              media=media,\n 1533:             inline_admin_formsets=inline_formsets,\n 1534:             errors=helpers.AdminErrorList(form, formsets),\n 1535              preserved_filters=self.get_preserved_filters(request),\n 1536          )\n ....\n 1644              return HttpResponseRedirect(request.get_full_path())\n 1645  \n 1646:         # If we're allowing changelist editing, we need to construct a formset\n 1647          # for the changelist given all the fields to be edited. Then we'll\n 1648:         # use the formset to validate/process POSTed data.\n 1649:         formset = cl.formset = None\n 1650  \n 1651          # Handle POSTed bulk-edit data.\n 1652          if request.method == 'POST' and cl.list_editable and '_save' in request.POST:\n 1653:             FormSet = self.get_changelist_formset(request)\n 1654:             modified_objects = self._get_list_editable_queryset(request, FormSet.get_default_prefix())\n 1655:             formset = cl.formset = FormSet(request.POST, request.FILES, queryset=modified_objects)\n 1656:             if formset.is_valid():\n 1657                  changecount = 0\n 1658:                 for form in formset.forms:\n 1659                      if form.has_changed():\n 1660                          obj = self.save_form(request, form, change=True)\n 1661                          self.save_model(request, obj, form, change=True)\n 1662:                         self.save_related(request, form, formsets=[], change=True)\n 1663                          change_msg = self.construct_change_message(request, form, None)\n 1664                          self.log_change(request, obj, change_msg)\n ....\n 1678                  return HttpResponseRedirect(request.get_full_path())\n 1679  \n 1680:         # Handle GET -- construct a formset for display.\n 1681          elif cl.list_editable:\n 1682:             FormSet = self.get_changelist_formset(request)\n 1683:             formset = cl.formset = FormSet(queryset=cl.result_list)\n 1684  \n 1685:         # Build the list of media to be used by the formset.\n 1686:         if formset:\n 1687:             media = self.media + formset.media\n 1688          else:\n 1689              media = self.media\n ....\n 1837          ], context)\n 1838  \n 1839:     def _create_formsets(self, request, obj, change):\n 1840:         \"Helper function to generate formsets for add/change_view.\"\n 1841:         formsets = []\n 1842          inline_instances = []\n 1843          prefixes = {}\n 1844:         get_formsets_args = [request]\n 1845          if change:\n 1846:             get_formsets_args.append(obj)\n 1847:         for FormSet, inline in self.get_formsets_with_inlines(*get_formsets_args):\n 1848:             prefix = FormSet.get_default_prefix()\n 1849              prefixes[prefix] = prefixes.get(prefix, 0) + 1\n 1850              if prefixes[prefix] != 1 or not prefix:\n 1851                  prefix = \"%s-%s\" % (prefix, prefixes[prefix])\n 1852:             formset_params = {\n 1853                  'instance': obj,\n 1854                  'prefix': prefix,\n ....\n 1856              }\n 1857              if request.method == 'POST':\n 1858:                 formset_params.update({\n 1859                      'data': request.POST.copy(),\n 1860                      'files': request.FILES,\n 1861                      'save_as_new': '_saveasnew' in request.POST\n 1862                  })\n 1863:             formsets.append(FormSet(**formset_params))\n 1864              inline_instances.append(inline)\n 1865:         return formsets, inline_instances\n 1866  \n 1867  \n ....\n 1876      model = None\n 1877      fk_name = None\n 1878:     formset = BaseInlineFormSet\n 1879      extra = 3\n 1880      min_num = None\n ....\n 1908          if self.classes and 'collapse' in self.classes:\n 1909              js.append('collapse%s.js' % extra)\n 1910:         return forms.Media(js=['admin/js/%s' % url for url in js])\n 1911  \n 1912      def get_extra(self, request, obj=None, **kwargs):\n 1913:         \"\"\"Hook for customizing the number of extra inline forms.\"\"\"\n 1914          return self.extra\n 1915  \n 1916      def get_min_num(self, request, obj=None, **kwargs):\n 1917:         \"\"\"Hook for customizing the min number of inline forms.\"\"\"\n 1918          return self.min_num\n 1919  \n 1920      def get_max_num(self, request, obj=None, **kwargs):\n 1921:         \"\"\"Hook for customizing the max number of extra inline forms.\"\"\"\n 1922          return self.max_num\n 1923  \n 1924:     def get_formset(self, request, obj=None, **kwargs):\n 1925:         \"\"\"Return a BaseInlineFormSet class for use in admin add/change views.\"\"\"\n 1926          if 'fields' in kwargs:\n 1927              fields = kwargs.pop('fields')\n ....\n 1941          defaults = {\n 1942              \"form\": self.form,\n 1943:             \"formset\": self.formset,\n 1944              \"fk_name\": self.fk_name,\n 1945              \"fields\": fields,\n ....\n 1994  \n 1995          if defaults['fields'] is None and not modelform_defines_fields(defaults['form']):\n 1996:             defaults['fields'] = forms.ALL_FIELDS\n 1997  \n 1998:         return inlineformset_factory(self.parent_model, self.model, **defaults)\n 1999  \n 2000      def _get_form_for_get_fields(self, request, obj=None):\n 2001:         return self.get_formset(request, obj, fields=None).form\n 2002  \n 2003      def get_queryset(self, request):\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/admin/sites.py:\n  307          Handle the \"change password\" task -- both form display and validation.\n  308          \"\"\"\n  309:         from django.contrib.admin.forms import AdminPasswordChangeForm\n  310          from django.contrib.auth.views import PasswordChangeView\n  311          url = reverse('admin:password_change_done', current_app=self.name)\n  ...\n  377          # Since this module gets imported in the application's root package,\n  378          # it cannot import models from other applications at the module level,\n  379:         # and django.contrib.admin.forms eventually imports User.\n  380:         from django.contrib.admin.forms import AdminAuthenticationForm\n  381          context = dict(\n  382              self.each_context(request),\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/admin/utils.py:\n    9  from django.db.models.deletion import Collector\n   10  from django.db.models.sql.constants import QUERY_TERMS\n   11: from django.forms.utils import pretty_name\n   12  from django.urls import NoReverseMatch, reverse\n   13  from django.utils import formats, timezone\n   ..\n  492  \n  493  \n  494: def construct_change_message(form, formsets, add):\n  495      \"\"\"\n  496      Construct a JSON structure describing changes from a changed object.\n  ...\n  504          change_message.append({'changed': {'fields': form.changed_data}})\n  505  \n  506:     if formsets:\n  507          with translation_override(None):\n  508:             for formset in formsets:\n  509:                 for added_object in formset.new_objects:\n  510                      change_message.append({\n  511                          'added': {\n  ...\n  514                          }\n  515                      })\n  516:                 for changed_object, changed_fields in formset.changed_objects:\n  517                      change_message.append({\n  518                          'changed': {\n  ...\n  522                          }\n  523                      })\n  524:                 for deleted_object in formset.deleted_objects:\n  525                      change_message.append({\n  526                          'deleted': {\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/admin/widgets.py:\n    5  import json\n    6  \n    7: from django import forms\n    8  from django.conf import settings\n    9  from django.core.exceptions import ValidationError\n   ..\n   17  \n   18  \n   19: class FilteredSelectMultiple(forms.SelectMultiple):\n   20      \"\"\"\n   21      A SelectMultiple with a JavaScript filter interface.\n   ..\n   34              'SelectFilter2.js',\n   35          ]\n   36:         return forms.Media(js=[\"admin/js/%s\" % path for path in js])\n   37  \n   38      def __init__(self, verbose_name, is_stacked, attrs=None, choices=()):\n   ..\n   51  \n   52  \n   53: class AdminDateWidget(forms.DateInput):\n   54      @property\n   55      def media(self):\n   ..\n   61              'admin/DateTimeShortcuts.js',\n   62          ]\n   63:         return forms.Media(js=[\"admin/js/%s\" % path for path in js])\n   64  \n   65      def __init__(self, attrs=None, format=None):\n   ..\n   70  \n   71  \n   72: class AdminTimeWidget(forms.TimeInput):\n   73      @property\n   74      def media(self):\n   ..\n   80              'admin/DateTimeShortcuts.js',\n   81          ]\n   82:         return forms.Media(js=[\"admin/js/%s\" % path for path in js])\n   83  \n   84      def __init__(self, attrs=None, format=None):\n   ..\n   89  \n   90  \n   91: class AdminSplitDateTime(forms.SplitDateTimeWidget):\n   92      \"\"\"\n   93      A SplitDateTime Widget that has some admin-specific styling.\n   ..\n   99          # Note that we're calling MultiWidget, not SplitDateTimeWidget, because\n  100          # we want to define widgets.\n  101:         forms.MultiWidget.__init__(self, widgets, attrs)\n  102  \n  103      def get_context(self, name, value, attrs):\n  ...\n  108  \n  109  \n  110: class AdminRadioSelect(forms.RadioSelect):\n  111      template_name = 'admin/widgets/radio.html'\n  112  \n  113  \n  114: class AdminFileWidget(forms.ClearableFileInput):\n  115      template_name = 'admin/widgets/clearable_file_input.html'\n  116  \n  ...\n  136  \n  137  \n  138: class ForeignKeyRawIdWidget(forms.TextInput):\n  139      \"\"\"\n  140      A Widget for displaying ForeignKeys in the \"raw_id\" interface rather than\n  ...\n  236  \n  237  \n  238: class RelatedFieldWidgetWrapper(forms.Widget):\n  239      \"\"\"\n  240      This class is a wrapper to a given widget to add the add icon for the\n  ...\n  328  \n  329  \n  330: class AdminTextareaWidget(forms.Textarea):\n  331      def __init__(self, attrs=None):\n  332          final_attrs = {'class': 'vLargeTextField'}\n  ...\n  336  \n  337  \n  338: class AdminTextInputWidget(forms.TextInput):\n  339      def __init__(self, attrs=None):\n  340          final_attrs = {'class': 'vTextField'}\n  ...\n  344  \n  345  \n  346: class AdminEmailInputWidget(forms.EmailInput):\n  347      def __init__(self, attrs=None):\n  348          final_attrs = {'class': 'vTextField'}\n  ...\n  352  \n  353  \n  354: class AdminURLFieldWidget(forms.URLInput):\n  355      template_name = 'admin/widgets/url.html'\n  356  \n  ...\n  369  \n  370  \n  371: class AdminIntegerFieldWidget(forms.NumberInput):\n  372      class_name = 'vIntegerField'\n  373  \n  ...\n  472          i18n_name = SELECT2_TRANSLATIONS.get(get_language())\n  473          i18n_file = ('admin/js/vendor/select2/i18n/%s.js' % i18n_name,) if i18n_name else ()\n  474:         return forms.Media(\n  475              js=(\n  476                  'admin/js/vendor/jquery/jquery%s.js' % extra,\n  ...\n  489  \n  490  \n  491: class AutocompleteSelect(AutocompleteMixin, forms.Select):\n  492      pass\n  493  \n  494  \n  495: class AutocompleteSelectMultiple(AutocompleteMixin, forms.SelectMultiple):\n  496      pass\n  497  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/admin/templatetags/admin_list.py:\n  295  \n  296  def results(cl):\n  297:     if cl.formset:\n  298:         for res, form in zip(cl.result_list, cl.formset.forms):\n  299              yield ResultList(form, items_for_result(cl, res, form))\n  300      else:\n  ...\n  304  \n  305  def result_hidden_fields(cl):\n  306:     if cl.formset:\n  307:         for res, form in zip(cl.result_list, cl.formset.forms):\n  308              if form[cl.model._meta.pk.name].is_hidden:\n  309                  yield mark_safe(form[cl.model._meta.pk.name])\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/admin/templatetags/admin_modify.py:\n   16      if 'adminform' in context:\n   17          prepopulated_fields.extend(context['adminform'].prepopulated_fields)\n   18:     if 'inline_admin_formsets' in context:\n   19:         for inline_admin_formset in context['inline_admin_formsets']:\n   20:             for inline_admin_form in inline_admin_formset:\n   21                  if inline_admin_form.original is None:\n   22                      prepopulated_fields.extend(inline_admin_form.prepopulated_fields)\n   ..\n   76              for field in line:\n   77                  count += 1\n   78:     if inline_admin_form.formset.can_delete:\n   79          # Delete checkbox\n   80          count += 1\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/auth/admin.py:\n    4  from django.contrib.admin.utils import unquote\n    5  from django.contrib.auth import update_session_auth_hash\n    6: from django.contrib.auth.forms import (\n    7      AdminPasswordChangeForm, UserChangeForm, UserCreationForm,\n    8  )\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/auth/forms.py:\n    1  import unicodedata\n    2  \n    3: from django import forms\n    4  from django.contrib.auth import (\n    5      authenticate, get_user_model, password_validation,\n    .\n   21  \n   22  \n   23: class ReadOnlyPasswordHashWidget(forms.Widget):\n   24      template_name = 'auth/widgets/read_only_password_hash.html'\n   25  \n   ..\n   41  \n   42  \n   43: class ReadOnlyPasswordHashField(forms.Field):\n   44      widget = ReadOnlyPasswordHashWidget\n   45  \n   ..\n   57  \n   58  \n   59: class UsernameField(forms.CharField):\n   60      def to_python(self, value):\n   61          return unicodedata.normalize('NFKC', super().to_python(value))\n   62  \n   63  \n   64: class UserCreationForm(forms.ModelForm):\n   65      \"\"\"\n   66      A form that creates a user, with no privileges, from the given username and\n   ..\n   70          'password_mismatch': _(\"The two password fields didn't match.\"),\n   71      }\n   72:     password1 = forms.CharField(\n   73          label=_(\"Password\"),\n   74          strip=False,\n   75:         widget=forms.PasswordInput,\n   76          help_text=password_validation.password_validators_help_text_html(),\n   77      )\n   78:     password2 = forms.CharField(\n   79          label=_(\"Password confirmation\"),\n   80:         widget=forms.PasswordInput,\n   81          strip=False,\n   82          help_text=_(\"Enter the same password as before, for verification.\"),\n   ..\n   97          password2 = self.cleaned_data.get(\"password2\")\n   98          if password1 and password2 and password1 != password2:\n   99:             raise forms.ValidationError(\n  100                  self.error_messages['password_mismatch'],\n  101                  code='password_mismatch',\n  ...\n  111              try:\n  112                  password_validation.validate_password(password, self.instance)\n  113:             except forms.ValidationError as error:\n  114                  self.add_error('password2', error)\n  115  \n  ...\n  122  \n  123  \n  124: class UserChangeForm(forms.ModelForm):\n  125      password = ReadOnlyPasswordHashField(\n  126          label=_(\"Password\"),\n  ...\n  151  \n  152  \n  153: class AuthenticationForm(forms.Form):\n  154      \"\"\"\n  155      Base class for authenticating users. Extend this to get a form that accepts\n  ...\n  158      username = UsernameField(\n  159          max_length=254,\n  160:         widget=forms.TextInput(attrs={'autofocus': True}),\n  161      )\n  162:     password = forms.CharField(\n  163          label=_(\"Password\"),\n  164          strip=False,\n  165:         widget=forms.PasswordInput,\n  166      )\n  167  \n  ...\n  195              self.user_cache = authenticate(self.request, username=username, password=password)\n  196              if self.user_cache is None:\n  197:                 raise forms.ValidationError(\n  198                      self.error_messages['invalid_login'],\n  199                      code='invalid_login',\n  ...\n  212  \n  213          If the given user cannot log in, this method should raise a\n  214:         ``forms.ValidationError``.\n  215  \n  216          If the given user may log in, this method should return None.\n  217          \"\"\"\n  218          if not user.is_active:\n  219:             raise forms.ValidationError(\n  220                  self.error_messages['inactive'],\n  221                  code='inactive',\n  ...\n  231  \n  232  \n  233: class PasswordResetForm(forms.Form):\n  234:     email = forms.EmailField(label=_(\"Email\"), max_length=254)\n  235  \n  236      def send_mail(self, subject_template_name, email_template_name,\n  ...\n  299  \n  300  \n  301: class SetPasswordForm(forms.Form):\n  302      \"\"\"\n  303      A form that lets a user change set their password without entering the old\n  ...\n  307          'password_mismatch': _(\"The two password fields didn't match.\"),\n  308      }\n  309:     new_password1 = forms.CharField(\n  310          label=_(\"New password\"),\n  311:         widget=forms.PasswordInput,\n  312          strip=False,\n  313          help_text=password_validation.password_validators_help_text_html(),\n  314      )\n  315:     new_password2 = forms.CharField(\n  316          label=_(\"New password confirmation\"),\n  317          strip=False,\n  318:         widget=forms.PasswordInput,\n  319      )\n  320  \n  ...\n  328          if password1 and password2:\n  329              if password1 != password2:\n  330:                 raise forms.ValidationError(\n  331                      self.error_messages['password_mismatch'],\n  332                      code='password_mismatch',\n  ...\n  351          'password_incorrect': _(\"Your old password was entered incorrectly. Please enter it again.\"),\n  352      })\n  353:     old_password = forms.CharField(\n  354          label=_(\"Old password\"),\n  355          strip=False,\n  356:         widget=forms.PasswordInput(attrs={'autofocus': True}),\n  357      )\n  358  \n  ...\n  365          old_password = self.cleaned_data[\"old_password\"]\n  366          if not self.user.check_password(old_password):\n  367:             raise forms.ValidationError(\n  368                  self.error_messages['password_incorrect'],\n  369                  code='password_incorrect',\n  ...\n  372  \n  373  \n  374: class AdminPasswordChangeForm(forms.Form):\n  375      \"\"\"\n  376      A form used to change the password of a user in the admin interface.\n  ...\n  380      }\n  381      required_css_class = 'required'\n  382:     password1 = forms.CharField(\n  383          label=_(\"Password\"),\n  384:         widget=forms.PasswordInput(attrs={'autofocus': True}),\n  385          strip=False,\n  386          help_text=password_validation.password_validators_help_text_html(),\n  387      )\n  388:     password2 = forms.CharField(\n  389          label=_(\"Password (again)\"),\n  390:         widget=forms.PasswordInput,\n  391          strip=False,\n  392          help_text=_(\"Enter the same password as before, for verification.\"),\n  ...\n  402          if password1 and password2:\n  403              if password1 != password2:\n  404:                 raise forms.ValidationError(\n  405                      self.error_messages['password_mismatch'],\n  406                      code='password_mismatch',\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/auth/hashers.py:\n  609      Password hashing using UNIX crypt (not recommended)\n  610  \n  611:     The crypt module is not supported on all platforms.\n  612      \"\"\"\n  613      algorithm = \"crypt\"\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/auth/views.py:\n    9  )\n   10  from django.contrib.auth.decorators import login_required\n   11: from django.contrib.auth.forms import (\n   12      AuthenticationForm, PasswordChangeForm, PasswordResetForm, SetPasswordForm,\n   13  )\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/contenttypes/admin.py:\n    4  from django.contrib.admin.options import InlineModelAdmin, flatten_fieldsets\n    5  from django.contrib.contenttypes.fields import GenericForeignKey\n    6: from django.contrib.contenttypes.forms import (\n    7:     BaseGenericInlineFormSet, generic_inlineformset_factory,\n    8  )\n    9  from django.core import checks\n   10  from django.core.exceptions import FieldDoesNotExist\n   11: from django.forms import ALL_FIELDS\n   12: from django.forms.models import modelform_defines_fields\n   13  \n   14  \n   ..\n   84      ct_field = \"content_type\"\n   85      ct_fk_field = \"object_id\"\n   86:     formset = BaseGenericInlineFormSet\n   87  \n   88      checks_class = GenericInlineModelAdminChecks\n   89  \n   90:     def get_formset(self, request, obj=None, **kwargs):\n   91          if 'fields' in kwargs:\n   92              fields = kwargs.pop('fields')\n   ..\n  109              \"form\": self.form,\n  110              \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n  111:             \"formset\": self.formset,\n  112              \"extra\": self.get_extra(request, obj),\n  113              \"can_delete\": can_delete,\n  ...\n  123              defaults['fields'] = ALL_FIELDS\n  124  \n  125:         return generic_inlineformset_factory(self.model, **defaults)\n  126  \n  127  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/contenttypes/forms.py:\n    1  from django.contrib.contenttypes.models import ContentType\n    2  from django.db import models\n    3: from django.forms import ModelForm, modelformset_factory\n    4: from django.forms.models import BaseModelFormSet\n    5  \n    6  \n    7: class BaseGenericInlineFormSet(BaseModelFormSet):\n    8      \"\"\"\n    9:     A formset for generic inline objects to a parent.\n   10      \"\"\"\n   11  \n   ..\n   44  \n   45  \n   46: def generic_inlineformset_factory(model, form=ModelForm,\n   47:                                   formset=BaseGenericInlineFormSet,\n   48                                    ct_field=\"content_type\", fk_field=\"object_id\",\n   49                                    fields=None, exclude=None,\n   ..\n   53                                    min_num=None, validate_min=False):\n   54      \"\"\"\n   55:     Return a ``GenericInlineFormSet`` for the given kwargs.\n   56  \n   57      You must provide ``ct_field`` and ``fk_field`` if they are different from\n   ..\n   69      else:\n   70          exclude = [ct_field.name, fk_field.name]\n   71:     FormSet = modelformset_factory(\n   72          model, form=form, formfield_callback=formfield_callback,\n   73:         formset=formset, extra=extra, can_delete=can_delete,\n   74          can_order=can_order, fields=fields, exclude=exclude, max_num=max_num,\n   75          validate_max=validate_max, min_num=min_num, validate_min=validate_min,\n   76      )\n   77:     FormSet.ct_field = ct_field\n   78:     FormSet.ct_fk_field = fk_field\n   79:     FormSet.for_concrete_model = for_concrete_model\n   80:     return FormSet\n   81  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/flatpages/admin.py:\n    1  from django.contrib import admin\n    2: from django.contrib.flatpages.forms import FlatpageForm\n    3  from django.contrib.flatpages.models import FlatPage\n    4  from django.utils.translation import gettext_lazy as _\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/flatpages/forms.py:\n    1: from django import forms\n    2  from django.conf import settings\n    3  from django.contrib.flatpages.models import FlatPage\n    .\n    5  \n    6  \n    7: class FlatpageForm(forms.ModelForm):\n    8:     url = forms.RegexField(\n    9          label=_(\"URL\"),\n   10          max_length=100,\n   ..\n   26          url = self.cleaned_data['url']\n   27          if not url.startswith('/'):\n   28:             raise forms.ValidationError(\n   29                  gettext(\"URL is missing a leading slash.\"),\n   30                  code='missing_leading_slash',\n   ..\n   33                  'django.middleware.common.CommonMiddleware' in settings.MIDDLEWARE and\n   34                  not url.endswith('/')):\n   35:             raise forms.ValidationError(\n   36                  gettext(\"URL is missing a trailing slash.\"),\n   37                  code='missing_trailing_slash',\n   ..\n   50              for site in sites:\n   51                  if same_url.filter(sites=site).exists():\n   52:                     raise forms.ValidationError(\n   53                          _('Flatpage with url %(url)s already exists for site %(site)s'),\n   54                          code='duplicate_url',\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/gis/measure.py:\n    2  # All rights reserved.\n    3  #\n    4: # Redistribution and use in source and binary forms, with or without modification,\n    5  # are permitted provided that the following conditions are met:\n    6  #\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/gis/admin/options.py:\n    3  from django.contrib.gis.db import models\n    4  from django.contrib.gis.gdal import OGRGeomType\n    5: from django.forms import Media\n    6  \n    7  spherical_mercator_srid = 3857\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/gis/admin/widgets.py:\n    3  from django.contrib.gis.gdal import GDALException\n    4  from django.contrib.gis.geos import GEOSException, GEOSGeometry\n    5: from django.forms.widgets import Textarea\n    6  from django.utils import translation\n    7  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/gis/db/backends/oracle/operations.py:\n    4  \n    5   Please note that WKT support is broken on the XE version, and thus\n    6:  this backend will not work on such platforms.  Specifically, XE lacks\n    7   support for an internal JVM, and Java libraries are required to use\n    8   the WKT constructors.\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/gis/db/backends/postgis/pgraster.py:\n    2  import struct\n    3  \n    4: from django.forms import ValidationError\n    5  \n    6  from .const import (\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/gis/db/models/fields.py:\n    1  from collections import defaultdict, namedtuple\n    2  \n    3: from django.contrib.gis import forms, gdal\n    4  from django.contrib.gis.db.models.proxy import SpatialProxy\n    5  from django.contrib.gis.gdal.error import GDALException\n    .\n  200      \"\"\"\n  201      description = _(\"The base Geometry field -- maps to the OpenGIS Specification Geometry type.\")\n  202:     form_class = forms.GeometryField\n  203      # The OpenGIS Geometry name.\n  204      geom_type = 'GEOMETRY'\n  ...\n  260          if (self.dim > 2 and 'widget' not in kwargs and\n  261                  not getattr(defaults['form_class'].widget, 'supports_3d', False)):\n  262:             defaults['widget'] = forms.Textarea\n  263          return super().formfield(**defaults)\n  264  \n  ...\n  276      geom_type = 'POINT'\n  277      geom_class = Point\n  278:     form_class = forms.PointField\n  279      description = _(\"Point\")\n  280  \n  ...\n  283      geom_type = 'LINESTRING'\n  284      geom_class = LineString\n  285:     form_class = forms.LineStringField\n  286      description = _(\"Line string\")\n  287  \n  ...\n  290      geom_type = 'POLYGON'\n  291      geom_class = Polygon\n  292:     form_class = forms.PolygonField\n  293      description = _(\"Polygon\")\n  294  \n  ...\n  297      geom_type = 'MULTIPOINT'\n  298      geom_class = MultiPoint\n  299:     form_class = forms.MultiPointField\n  300      description = _(\"Multi-point\")\n  301  \n  ...\n  304      geom_type = 'MULTILINESTRING'\n  305      geom_class = MultiLineString\n  306:     form_class = forms.MultiLineStringField\n  307      description = _(\"Multi-line string\")\n  308  \n  ...\n  311      geom_type = 'MULTIPOLYGON'\n  312      geom_class = MultiPolygon\n  313:     form_class = forms.MultiPolygonField\n  314      description = _(\"Multi polygon\")\n  315  \n  ...\n  318      geom_type = 'GEOMETRYCOLLECTION'\n  319      geom_class = GeometryCollection\n  320:     form_class = forms.GeometryCollectionField\n  321      description = _(\"Geometry collection\")\n  322  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/gis/forms/__init__.py:\n    1: from django.forms import *  # NOQA\n    2  \n    3  from .fields import (  # NOQA\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/gis/forms/fields.py:\n    1: from django import forms\n    2  from django.contrib.gis.geos import GEOSException, GEOSGeometry\n    3  from django.utils.translation import gettext_lazy as _\n    .\n    6  \n    7  \n    8: class GeometryField(forms.Field):\n    9      \"\"\"\n   10      This is the basic form field for a Geometry.  Any textual input that is\n   ..\n   44                      value = None\n   45              if value is None:\n   46:                 raise forms.ValidationError(self.error_messages['invalid_geom'], code='invalid_geom')\n   47  \n   48          # Try to set the srid\n   ..\n   68          # using the OGC string label).\n   69          if str(geom.geom_type).upper() != self.geom_type and not self.geom_type == 'GEOMETRY':\n   70:             raise forms.ValidationError(self.error_messages['invalid_geom_type'], code='invalid_geom_type')\n   71  \n   72          # Transforming the geometry if the SRID was set.\n   ..\n   75                  geom.transform(self.srid)\n   76              except GEOSException:\n   77:                 raise forms.ValidationError(\n   78                      self.error_messages['transform_error'], code='transform_error')\n   79  \n   ..\n   86              data = self.to_python(data)\n   87              initial = self.to_python(initial)\n   88:         except forms.ValidationError:\n   89              return True\n   90  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/gis/forms/widgets.py:\n    5  from django.contrib.gis.geometry import json_regex\n    6  from django.contrib.gis.geos import GEOSException, GEOSGeometry\n    7: from django.forms.widgets import Widget\n    8  from django.utils import translation\n    9  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/gis/gdal/libgdal.py:\n   59      \"\"\"\n   60      Return the correct STDCALL function for certain OSR routines on Win32\n   61:     platforms.\n   62      \"\"\"\n   63      if os.name == 'nt':\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/gis/gdal/raster/source.py:\n  200          \"\"\"\n  201          Flush all data from memory into the source file if it exists.\n  202:         The data that needs flushing are geotransforms, coordinate systems,\n  203          nodata_values and pixel values. This function will be called\n  204          automatically wherever it is needed.\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/gis/geos/libgeos.py:\n   67      _lgeos.initGEOS_r.restype = CONTEXT_PTR\n   68      _lgeos.finishGEOS_r.argtypes = [CONTEXT_PTR]\n   69:     # Set restype for compatibility across 32 and 64-bit platforms.\n   70      _lgeos.GEOSversion.restype = c_char_p\n   71      return _lgeos\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/postgres/fields/array.py:\n    2  \n    3  from django.contrib.postgres import lookups\n    4: from django.contrib.postgres.forms import SimpleArrayField\n    5  from django.contrib.postgres.validators import ArrayMaxLengthValidator\n    6  from django.core import checks, exceptions\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/postgres/fields/hstore.py:\n    1  import json\n    2  \n    3: from django.contrib.postgres import forms, lookups\n    4  from django.contrib.postgres.fields.array import ArrayField\n    5  from django.core import exceptions\n    .\n   46      def formfield(self, **kwargs):\n   47          defaults = {\n   48:             'form_class': forms.HStoreField,\n   49          }\n   50          defaults.update(kwargs)\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/postgres/fields/jsonb.py:\n    3  from psycopg2.extras import Json\n    4  \n    5: from django.contrib.postgres import forms, lookups\n    6  from django.core import exceptions\n    7  from django.db.models import (\n    .\n   75  \n   76      def formfield(self, **kwargs):\n   77:         defaults = {'form_class': forms.JSONField}\n   78          defaults.update(kwargs)\n   79          return super().formfield(**defaults)\n   ..\n   96  \n   97      def as_sql(self, compiler, connection):\n   98:         key_transforms = [self.key_name]\n   99          previous = self.lhs\n  100          while isinstance(previous, KeyTransform):\n  101:             key_transforms.insert(0, previous.key_name)\n  102              previous = previous.lhs\n  103          lhs, params = compiler.compile(previous)\n  104:         if len(key_transforms) > 1:\n  105:             return \"(%s %s %%s)\" % (lhs, self.nested_operator), [key_transforms] + params\n  106          try:\n  107              int(self.key_name)\n  ...\n  141  \n  142  \n  143: class KeyTransformStartsWith(KeyTransformTextLookupMixin, builtin_lookups.StartsWith):\n  144      pass\n  145  \n  ...\n  167  KeyTransform.register_lookup(KeyTransformIExact)\n  168  KeyTransform.register_lookup(KeyTransformIContains)\n  169: KeyTransform.register_lookup(KeyTransformStartsWith)\n  170  KeyTransform.register_lookup(KeyTransformIStartsWith)\n  171  KeyTransform.register_lookup(KeyTransformEndsWith)\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/postgres/fields/ranges.py:\n    4  from psycopg2.extras import DateRange, DateTimeTZRange, NumericRange, Range\n    5  \n    6: from django.contrib.postgres import forms, lookups\n    7  from django.db import models\n    8  \n    .\n   86      base_field = models.IntegerField\n   87      range_type = NumericRange\n   88:     form_field = forms.IntegerRangeField\n   89  \n   90      def db_type(self, connection):\n   ..\n   95      base_field = models.BigIntegerField\n   96      range_type = NumericRange\n   97:     form_field = forms.IntegerRangeField\n   98  \n   99      def db_type(self, connection):\n  ...\n  104      base_field = models.FloatField\n  105      range_type = NumericRange\n  106:     form_field = forms.FloatRangeField\n  107  \n  108      def db_type(self, connection):\n  ...\n  113      base_field = models.DateTimeField\n  114      range_type = DateTimeTZRange\n  115:     form_field = forms.DateTimeRangeField\n  116  \n  117      def db_type(self, connection):\n  ...\n  122      base_field = models.DateField\n  123      range_type = DateRange\n  124:     form_field = forms.DateRangeField\n  125  \n  126      def db_type(self, connection):\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/postgres/forms/array.py:\n    2  from itertools import chain\n    3  \n    4: from django import forms\n    5  from django.contrib.postgres.validators import (\n    6      ArrayMaxLengthValidator, ArrayMinLengthValidator,\n    .\n   12  \n   13  \n   14: class SimpleArrayField(forms.CharField):\n   15      default_error_messages = {\n   16          'item_invalid': _('Item %(nth)s in the array did not validate: '),\n   ..\n   93  \n   94  \n   95: class SplitArrayWidget(forms.Widget):\n   96      template_name = 'postgres/widgets/split_array.html'\n   97  \n   ..\n  156  \n  157  \n  158: class SplitArrayField(forms.Field):\n  159      default_error_messages = {\n  160          'item_invalid': _('Item %(nth)s in the array did not validate: '),\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/postgres/forms/hstore.py:\n    1  import json\n    2  \n    3: from django import forms\n    4  from django.core.exceptions import ValidationError\n    5  from django.utils.translation import gettext_lazy as _\n    .\n    8  \n    9  \n   10: class HStoreField(forms.CharField):\n   11      \"\"\"\n   12      A field for HStore data which accepts dictionary JSON input.\n   13      \"\"\"\n   14:     widget = forms.Textarea\n   15      default_error_messages = {\n   16          'invalid_json': _('Could not load JSON data.'),\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/postgres/forms/jsonb.py:\n    1  import json\n    2  \n    3: from django import forms\n    4  from django.utils.translation import gettext_lazy as _\n    5  \n    .\n   15  \n   16  \n   17: class JSONField(forms.CharField):\n   18      default_error_messages = {\n   19          'invalid': _(\"'%(value)s' value must be valid JSON.\"),\n   20      }\n   21:     widget = forms.Textarea\n   22  \n   23      def to_python(self, value):\n   ..\n   31              converted = json.loads(value)\n   32          except ValueError:\n   33:             raise forms.ValidationError(\n   34                  self.error_messages['invalid'],\n   35                  code='invalid',\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/contrib/postgres/forms/ranges.py:\n    1  from psycopg2.extras import DateRange, DateTimeTZRange, NumericRange\n    2  \n    3: from django import forms\n    4  from django.core import exceptions\n    5: from django.forms.widgets import MultiWidget\n    6  from django.utils.translation import gettext_lazy as _\n    7  \n    .\n   12  \n   13  \n   14: class BaseRangeField(forms.MultiValueField):\n   15      default_error_messages = {\n   16          'invalid': _('Enter two valid values.'),\n   ..\n   63  class IntegerRangeField(BaseRangeField):\n   64      default_error_messages = {'invalid': _('Enter two whole numbers.')}\n   65:     base_field = forms.IntegerField\n   66      range_type = NumericRange\n   67  \n   ..\n   69  class FloatRangeField(BaseRangeField):\n   70      default_error_messages = {'invalid': _('Enter two numbers.')}\n   71:     base_field = forms.FloatField\n   72      range_type = NumericRange\n   73  \n   ..\n   75  class DateTimeRangeField(BaseRangeField):\n   76      default_error_messages = {'invalid': _('Enter two valid date/times.')}\n   77:     base_field = forms.DateTimeField\n   78      range_type = DateTimeTZRange\n   79  \n   ..\n   81  class DateRangeField(BaseRangeField):\n   82      default_error_messages = {'invalid': _('Enter two valid dates.')}\n   83:     base_field = forms.DateField\n   84      range_type = DateRange\n   85  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/core/files/move.py:\n   23              return False\n   24  \n   25:     # All other platforms: check for same pathname.\n   26      return (os.path.normcase(os.path.abspath(src)) ==\n   27              os.path.normcase(os.path.abspath(dst)))\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/core/files/temp.py:\n    1  \"\"\"\n    2  The temp module provides a NamedTemporaryFile that can be reopened in the same\n    3: process on any platform. Most platforms use the standard Python\n    4  tempfile.NamedTemporaryFile class, but Windows users are given a custom class.\n    5  \n    .\n    8  if the same flag is not provided [1][2]. Note that this does not address the\n    9  more general issue of opening a file for writing and reading in multiple\n   10: processes in a manner that works across platforms.\n   11  \n   12  The custom version of NamedTemporaryFile doesn't support the same keyword\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/core/management/base.py:\n  125  \n  126      2. The ``run_from_argv()`` method calls ``create_parser()`` to get\n  127:        an ``ArgumentParser`` for the arguments, parses them, performs\n  128         any environment changes requested by options like\n  129         ``pythonpath``, and then calls the ``execute()`` method,\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/core/management/commands/makemessages.py:\n   21  from django.utils.translation import templatize\n   22  \n   23: plural_forms_re = re.compile(r'^(?P<value>\"Plural-Forms.+?\\\\n\")\\s*$', re.MULTILINE | re.DOTALL)\n   24  STATUS_OK = 0\n   25  NO_LOCALE_DIR = object()\n   ..\n  642                  msgs = fp.read()\n  643              if not self.invoked_for_django:\n  644:                 msgs = self.copy_plural_forms(msgs, locale)\n  645          msgs = normalize_eols(msgs)\n  646          msgs = msgs.replace(\n  ...\n  659                      self.stdout.write(errors)\n  660  \n  661:     def copy_plural_forms(self, msgs, locale):\n  662          \"\"\"\n  663:         Copy plural forms header contents from a Django catalog of locale to\n  664          the msgs string, inserting it at the right place. msgs should be the\n  665          contents of a newly created .po file.\n  ...\n  674              if os.path.exists(django_po):\n  675                  with open(django_po, 'r', encoding='utf-8') as fp:\n  676:                     m = plural_forms_re.search(fp.read())\n  677                  if m:\n  678                      plural_form_line = m.group('value')\n  679                      if self.verbosity > 1:\n  680:                         self.stdout.write(\"copying plural forms: %s\\n\" % plural_form_line)\n  681                      lines = []\n  682                      found = False\n  683                      for line in msgs.splitlines():\n  684:                         if not found and (not line or plural_forms_re.search(line)):\n  685                              line = plural_form_line\n  686                              found = True\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/db/backends/base/operations.py:\n   15      \"\"\"\n   16      Encapsulate backend-specific differences, such as the way a backend\n   17:     performs ordering or calculates the ID of a recently-inserted row.\n   18      \"\"\"\n   19      compiler_module = \"django.db.models.sql.compiler\"\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/db/backends/oracle/operations.py:\n  445          Transform a date value to an object compatible with what is expected\n  446          by the backend driver for date columns.\n  447:         The default implementation transforms the date to text, but that is not\n  448          necessary for Oracle.\n  449          \"\"\"\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/db/migrations/migration.py:\n  102                  if not operation.reduces_to_sql:\n  103                      schema_editor.collected_sql.append(\n  104:                         \"-- MIGRATION NOW PERFORMS OPERATION THAT CANNOT BE WRITTEN AS SQL:\"\n  105                      )\n  106                  schema_editor.collected_sql.append(\"-- %s\" % operation.describe())\n  ...\n  157                  if not operation.reduces_to_sql:\n  158                      schema_editor.collected_sql.append(\n  159:                         \"-- MIGRATION NOW PERFORMS OPERATION THAT CANNOT BE WRITTEN AS SQL:\"\n  160                      )\n  161                  schema_editor.collected_sql.append(\"-- %s\" % operation.describe())\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/db/migrations/operations/base.py:\n    7  \n    8      It's responsible for both mutating the in-memory model state\n    9:     (see db/migrations/state.py) to represent what it performs, as well\n   10      as actually performing it against a live database.\n   11  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/db/models/base.py:\n  598              if any(LOOKUP_SEP in f for f in fields):\n  599                  raise ValueError(\n  600:                     'Found \"%s\" in fields argument. Relations and transforms '\n  601                      'are not allowed in fields.' % LOOKUP_SEP)\n  602  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/db/models/lookups.py:\n   17          self.lhs, self.rhs = lhs, rhs\n   18          self.rhs = self.get_prep_lookup()\n   19:         if hasattr(self.lhs, 'get_bilateral_transforms'):\n   20:             bilateral_transforms = self.lhs.get_bilateral_transforms()\n   21          else:\n   22:             bilateral_transforms = []\n   23:         if bilateral_transforms:\n   24              # Warn the user as soon as possible if they are trying to apply\n   25              # a bilateral transformation on a nested QuerySet: that won't work.\n   ..\n   27              if isinstance(rhs, Query):\n   28                  raise NotImplementedError(\"Bilateral transformations on nested querysets are not supported.\")\n   29:         self.bilateral_transforms = bilateral_transforms\n   30  \n   31:     def apply_bilateral_transforms(self, value):\n   32:         for transform in self.bilateral_transforms:\n   33              value = transform(value)\n   34          return value\n   ..\n   37          if rhs is None:\n   38              rhs = self.rhs\n   39:         if self.bilateral_transforms:\n   40              sqls, sqls_params = [], []\n   41              for p in rhs:\n   42                  value = Value(p, output_field=self.lhs.output_field)\n   43:                 value = self.apply_bilateral_transforms(value)\n   44                  value = value.resolve_expression(compiler.query)\n   45                  sql, sql_params = compiler.compile(value)\n   ..\n   80      def process_rhs(self, compiler, connection):\n   81          value = self.rhs\n   82:         if self.bilateral_transforms:\n   83              if self.rhs_is_direct_value():\n   84                  # Do not call get_db_prep_lookup here as the value will be\n   85                  # transformed before being used for lookup\n   86                  value = Value(value, output_field=self.lhs.output_field)\n   87:             value = self.apply_bilateral_transforms(value)\n   88              value = value.resolve_expression(compiler.query)\n   89          if hasattr(value, 'as_sql'):\n   ..\n  137          return self.get_source_expressions()[0]\n  138  \n  139:     def get_bilateral_transforms(self):\n  140:         if hasattr(self.lhs, 'get_bilateral_transforms'):\n  141:             bilateral_transforms = self.lhs.get_bilateral_transforms()\n  142          else:\n  143:             bilateral_transforms = []\n  144          if self.bilateral:\n  145:             bilateral_transforms.append(self.__class__)\n  146:         return bilateral_transforms\n  147  \n  148  \n  ...\n  390          # SQL reference values or SQL transformations we need the correct\n  391          # pattern added.\n  392:         if hasattr(self.rhs, 'as_sql') or self.bilateral_transforms:\n  393              pattern = connection.pattern_ops[self.lookup_name].format(connection.pattern_esc)\n  394              return pattern.format(rhs)\n  ...\n  404      def process_rhs(self, qn, connection):\n  405          rhs, params = super().process_rhs(qn, connection)\n  406:         if params and not self.bilateral_transforms:\n  407              params[0] = \"%%%s%%\" % connection.ops.prep_for_like_query(params[0])\n  408          return rhs, params\n  ...\n  422      def process_rhs(self, qn, connection):\n  423          rhs, params = super().process_rhs(qn, connection)\n  424:         if params and not self.bilateral_transforms:\n  425              params[0] = \"%s%%\" % connection.ops.prep_for_like_query(params[0])\n  426          return rhs, params\n  ...\n  434      def process_rhs(self, qn, connection):\n  435          rhs, params = super().process_rhs(qn, connection)\n  436:         if params and not self.bilateral_transforms:\n  437              params[0] = \"%s%%\" % connection.ops.prep_for_like_query(params[0])\n  438          return rhs, params\n  ...\n  446      def process_rhs(self, qn, connection):\n  447          rhs, params = super().process_rhs(qn, connection)\n  448:         if params and not self.bilateral_transforms:\n  449              params[0] = \"%%%s\" % connection.ops.prep_for_like_query(params[0])\n  450          return rhs, params\n  ...\n  458      def process_rhs(self, qn, connection):\n  459          rhs, params = super().process_rhs(qn, connection)\n  460:         if params and not self.bilateral_transforms:\n  461              params[0] = \"%%%s\" % connection.ops.prep_for_like_query(params[0])\n  462          return rhs, params\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/db/models/fields/__init__.py:\n    9  from functools import partialmethod, total_ordering\n   10  \n   11: from django import forms\n   12  from django.apps import apps\n   13  from django.conf import settings\n   ..\n  839  \n  840      def formfield(self, form_class=None, choices_form_class=None, **kwargs):\n  841:         \"\"\"Return a django.forms.Field instance for this field.\"\"\"\n  842          defaults = {'required': not self.blank,\n  843                      'label': capfirst(self.verbose_name),\n  ...\n  860                  form_class = choices_form_class\n  861              else:\n  862:                 form_class = forms.TypedChoiceField\n  863              # Many of the subclass-specific formfield arguments (min_value,\n  864              # max_value) don't apply for choice fields, so be sure to only pass\n  ...\n  871          defaults.update(kwargs)\n  872          if form_class is None:\n  873:             form_class = forms.CharField\n  874          return form_class(**defaults)\n  875  \n  ...\n 1031              defaults = {'choices': self.get_choices(include_blank=include_blank)}\n 1032          else:\n 1033:             defaults = {'form_class': forms.BooleanField}\n 1034          defaults.update(kwargs)\n 1035          return super().formfield(**defaults)\n ....\n 1087  \n 1088      def formfield(self, **kwargs):\n 1089:         # Passing max_length to forms.CharField means that the value's length\n 1090          # will be validated twice. This is considered acceptable since we want\n 1091          # the value in the form field (to pass into widget for example).\n ....\n 1282  \n 1283      def formfield(self, **kwargs):\n 1284:         defaults = {'form_class': forms.DateField}\n 1285          defaults.update(kwargs)\n 1286          return super().formfield(**defaults)\n ....\n 1437  \n 1438      def formfield(self, **kwargs):\n 1439:         defaults = {'form_class': forms.DateTimeField}\n 1440          defaults.update(kwargs)\n 1441          return super().formfield(**defaults)\n ....\n 1584              'max_digits': self.max_digits,\n 1585              'decimal_places': self.decimal_places,\n 1586:             'form_class': forms.DecimalField,\n 1587          }\n 1588          defaults.update(kwargs)\n ....\n 1646      def formfield(self, **kwargs):\n 1647          defaults = {\n 1648:             'form_class': forms.DurationField,\n 1649          }\n 1650          defaults.update(kwargs)\n ....\n 1671          # twice.\n 1672          defaults = {\n 1673:             'form_class': forms.EmailField,\n 1674          }\n 1675          defaults.update(kwargs)\n ....\n 1730              'match': self.match,\n 1731              'recursive': self.recursive,\n 1732:             'form_class': forms.FilePathField,\n 1733              'allow_files': self.allow_files,\n 1734              'allow_folders': self.allow_folders,\n ....\n 1770  \n 1771      def formfield(self, **kwargs):\n 1772:         defaults = {'form_class': forms.FloatField}\n 1773          defaults.update(kwargs)\n 1774          return super().formfield(**defaults)\n ....\n 1842  \n 1843      def formfield(self, **kwargs):\n 1844:         defaults = {'form_class': forms.IntegerField}\n 1845          defaults.update(kwargs)\n 1846          return super().formfield(**defaults)\n ....\n 1967          defaults = {\n 1968              'protocol': self.protocol,\n 1969:             'form_class': forms.GenericIPAddressField,\n 1970          }\n 1971          defaults.update(kwargs)\n ....\n 2018  \n 2019      def formfield(self, **kwargs):\n 2020:         defaults = {'form_class': forms.NullBooleanField}\n 2021          defaults.update(kwargs)\n 2022          return super().formfield(**defaults)\n ....\n 2090  \n 2091      def formfield(self, **kwargs):\n 2092:         defaults = {'form_class': forms.SlugField, 'allow_unicode': self.allow_unicode}\n 2093          defaults.update(kwargs)\n 2094          return super().formfield(**defaults)\n ....\n 2118  \n 2119      def formfield(self, **kwargs):\n 2120:         # Passing max_length to forms.CharField means that the value's length\n 2121          # will be validated twice. This is considered acceptable since we want\n 2122          # the value in the form field (to pass into widget for example).\n 2123          defaults = {'max_length': self.max_length}\n 2124          if not self.choices:\n 2125:             defaults['widget'] = forms.Textarea\n 2126          defaults.update(kwargs)\n 2127          return super().formfield(**defaults)\n ....\n 2254  \n 2255      def formfield(self, **kwargs):\n 2256:         defaults = {'form_class': forms.TimeField}\n 2257          defaults.update(kwargs)\n 2258          return super().formfield(**defaults)\n ....\n 2277          # twice.\n 2278          defaults = {\n 2279:             'form_class': forms.URLField,\n 2280          }\n 2281          defaults.update(kwargs)\n ....\n 2372      def formfield(self, **kwargs):\n 2373          defaults = {\n 2374:             'form_class': forms.UUIDField,\n 2375          }\n 2376          defaults.update(kwargs)\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/db/models/fields/files.py:\n    2  import posixpath\n    3  \n    4: from django import forms\n    5  from django.core import checks\n    6  from django.core.files.base import File\n    .\n  319  \n  320      def formfield(self, **kwargs):\n  321:         defaults = {'form_class': forms.FileField, 'max_length': self.max_length}\n  322          defaults.update(kwargs)\n  323          return super().formfield(**defaults)\n  ...\n  459  \n  460      def formfield(self, **kwargs):\n  461:         defaults = {'form_class': forms.ImageField}\n  462          defaults.update(kwargs)\n  463          return super().formfield(**defaults)\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/db/models/fields/related.py:\n    3  from functools import partial\n    4  \n    5: from django import forms\n    6  from django.apps import apps\n    7  from django.core import checks, exceptions\n    .\n   68      The `model` argument must be a model class. Each subsequent positional\n   69      argument is another model, or a reference to another model - see\n   70:     `resolve_relation()` for the various forms these may take. Any relative\n   71      references will be resolved relative to `model`.\n   72  \n   ..\n  950                               (self.name, self.remote_field.model))\n  951          defaults = {\n  952:             'form_class': forms.ModelChoiceField,\n  953              'queryset': self.remote_field.model._default_manager.using(using),\n  954              'to_field_name': self.remote_field.field_name,\n  ...\n 1621      def formfield(self, *, using=None, **kwargs):\n 1622          defaults = {\n 1623:             'form_class': forms.ModelMultipleChoiceField,\n 1624              'queryset': self.remote_field.model._default_manager.using(using),\n 1625          }\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/db/models/fields/related_descriptors.py:\n   30     instance, making the many-to-one and one-to-one cases identical as far as\n   31     the descriptor is concerned. The constraint is checked upstream (unicity\n   32:    validation in forms) or downstream (unique indexes in the database).\n   33  \n   34  2. Related instance on the forward side of a one-to-one\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/db/models/fields/reverse_related.py:\n  152          # many-to-many objects. It uses the lower-cased object_name + \"_set\",\n  153          # but this can be overridden with the \"related_name\" option.\n  154:         # Due to backwards compatibility ModelForms need to be able to provide\n  155:         # an alternate model. See BaseInlineFormSet.get_default_prefix().\n  156          opts = model._meta if model else self.related_model._meta\n  157          model = model or self.related_model\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/db/models/sql/query.py:\n  166          self.where = where()\n  167          self.where_class = where\n  168:         # The group_by attribute can have one of the following forms:\n  169          #  - None: no group by at all in the query\n  170          #  - A tuple of expressions: group by (at least) those expressions.\n  ...\n 1055      def build_lookup(self, lookups, lhs, rhs):\n 1056          \"\"\"\n 1057:         Try to extract transforms and lookup from given lhs.\n 1058  \n 1059          The lhs value is something that works like SQLExpression.\n ....\n 1202  \n 1203          if join_info.final_field.is_relation:\n 1204:             # No support for transforms for relational fields\n 1205              num_lookups = len(lookups)\n 1206              if num_lookups > 1:\n ....\n 1331          (the last used join field) and target (which is a field guaranteed to\n 1332          contain the same value as the final field). Finally, return those names\n 1333:         that weren't found (which are likely transforms and the final lookup).\n 1334          \"\"\"\n 1335          path, names_with_path = [], []\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/forms/__init__.py:\n    4  \n    5  from django.core.exceptions import ValidationError  # NOQA\n    6: from django.forms.boundfield import *  # NOQA\n    7: from django.forms.fields import *  # NOQA\n    8: from django.forms.forms import *  # NOQA\n    9: from django.forms.formsets import *  # NOQA\n   10: from django.forms.models import *  # NOQA\n   11: from django.forms.widgets import *  # NOQA\n   12  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/forms/boundfield.py:\n    2  import warnings\n    3  \n    4: from django.forms.utils import flatatt, pretty_name\n    5: from django.forms.widgets import Textarea, TextInput\n    6  from django.utils.deprecation import RemovedInDjango21Warning\n    7  from django.utils.functional import cached_property\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/forms/fields.py:\n   18  # Provide this import for backwards compatibility.\n   19  from django.core.validators import EMPTY_VALUES  # NOQA\n   20: from django.forms.boundfield import BoundField\n   21: from django.forms.utils import from_current_timezone, to_current_timezone\n   22: from django.forms.widgets import (\n   23      FILE_INPUT_CONTRADICTION, CheckboxInput, ClearableFileInput, DateInput,\n   24      DateTimeInput, EmailInput, HiddenInput, MultipleHiddenInput,\n   ..\n  724          Explicitly check for the string 'True' and 'False', which is what a\n  725          hidden field will submit for True and False, for 'true' and 'false',\n  726:         which are likely to be returned by JavaScript serializations of forms,\n  727          and for '1' and '0', which is what a RadioField will submit. Unlike\n  728          the Booleanfield, this field must check for True because it doesn't\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/forms/forms.py:\n    8  from django.core.exceptions import NON_FIELD_ERRORS, ValidationError\n    9  # BoundField is imported for backwards compatibility in Django 1.9\n   10: from django.forms.boundfield import BoundField  # NOQA\n   11: from django.forms.fields import Field, FileField\n   12  # pretty_name is imported for backwards compatibility in Django 1.9\n   13: from django.forms.utils import ErrorDict, ErrorList, pretty_name  # NOQA\n   14: from django.forms.widgets import Media, MediaDefiningClass\n   15  from django.utils.functional import cached_property\n   16  from django.utils.html import conditional_escape, html_safe\n   ..\n  412          \"\"\"\n  413          An internal hook for performing additional cleaning after form cleaning\n  414:         is complete. Used for model validation in model forms.\n  415          \"\"\"\n  416          pass\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/forms/formsets.py:\n    1  from django.core.exceptions import ValidationError\n    2: from django.forms import Form\n    3: from django.forms.fields import BooleanField, IntegerField\n    4: from django.forms.utils import ErrorList\n    5: from django.forms.widgets import HiddenInput\n    6  from django.utils.functional import cached_property\n    7  from django.utils.html import html_safe\n    .\n    9  from django.utils.translation import gettext as _, ngettext\n   10  \n   11: __all__ = ('BaseFormSet', 'formset_factory', 'all_valid')\n   12  \n   13  # special field names\n   14: TOTAL_FORM_COUNT = 'TOTAL_FORMS'\n   15: INITIAL_FORM_COUNT = 'INITIAL_FORMS'\n   16: MIN_NUM_FORM_COUNT = 'MIN_NUM_FORMS'\n   17: MAX_NUM_FORM_COUNT = 'MAX_NUM_FORMS'\n   18  ORDERING_FIELD_NAME = 'ORDER'\n   19  DELETION_FIELD_NAME = 'DELETE'\n   20  \n   21: # default minimum number of forms in a formset\n   22  DEFAULT_MIN_NUM = 0\n   23  \n   24: # default maximum number of forms in a formset, to prevent memory exhaustion\n   25  DEFAULT_MAX_NUM = 1000\n   26  \n   ..\n   29      \"\"\"\n   30      Keep track of how many form instances are displayed on the page. If adding\n   31:     new forms via JavaScript, you should increment the count field of this form\n   32      as well.\n   33      \"\"\"\n   ..\n   44  \n   45  @html_safe\n   46: class BaseFormSet:\n   47      \"\"\"\n   48      A collection of instances of the same Form class.\n   ..\n   65  \n   66      def __iter__(self):\n   67:         \"\"\"Yield the forms in the order they should be rendered.\"\"\"\n   68:         return iter(self.forms)\n   69  \n   70      def __getitem__(self, index):\n   71          \"\"\"Return the form at the given index, based on the rendering order.\"\"\"\n   72:         return self.forms[index]\n   73  \n   74      def __len__(self):\n   75:         return len(self.forms)\n   76  \n   77      def __bool__(self):\n   78          \"\"\"\n   79:         Return True since all formsets have a management form which is not\n   80          included in the length.\n   81          \"\"\"\n   ..\n   84      @cached_property\n   85      def management_form(self):\n   86:         \"\"\"Return the ManagementForm instance for this FormSet.\"\"\"\n   87          if self.is_bound:\n   88              form = ManagementForm(self.data, auto_id=self.auto_id, prefix=self.prefix)\n   ..\n  102  \n  103      def total_form_count(self):\n  104:         \"\"\"Return the total number of forms in this FormSet.\"\"\"\n  105          if self.is_bound:\n  106              # return absolute_max if it is lower than the actual total form\n  107              # count in the data; this is DoS protection to prevent clients\n  108              # from forcing the server to instantiate arbitrary numbers of\n  109:             # forms\n  110              return min(self.management_form.cleaned_data[TOTAL_FORM_COUNT], self.absolute_max)\n  111          else:\n  112:             initial_forms = self.initial_form_count()\n  113:             total_forms = max(initial_forms, self.min_num) + self.extra\n  114              # Allow all existing related objects/inlines to be displayed,\n  115              # but don't allow extra beyond max_num.\n  116:             if initial_forms > self.max_num >= 0:\n  117:                 total_forms = initial_forms\n  118:             elif total_forms > self.max_num >= 0:\n  119:                 total_forms = self.max_num\n  120:         return total_forms\n  121  \n  122      def initial_form_count(self):\n  123:         \"\"\"Return the number of forms that are required in this FormSet.\"\"\"\n  124          if self.is_bound:\n  125              return self.management_form.cleaned_data[INITIAL_FORM_COUNT]\n  126          else:\n  127              # Use the length of the initial data if it's there, 0 otherwise.\n  128:             initial_forms = len(self.initial) if self.initial else 0\n  129:         return initial_forms\n  130  \n  131      @cached_property\n  132:     def forms(self):\n  133:         \"\"\"Instantiate forms at first property access.\"\"\"\n  134          # DoS protection is included in total_form_count()\n  135:         forms = [self._construct_form(i, **self.get_form_kwargs(i))\n  136                   for i in range(self.total_form_count())]\n  137:         return forms\n  138  \n  139      def get_form_kwargs(self, index):\n  140          \"\"\"\n  141:         Return additional keyword arguments for each individual formset form.\n  142  \n  143          index will be None if the form being constructed is a new empty\n  ...\n  147  \n  148      def _construct_form(self, i, **kwargs):\n  149:         \"\"\"Instantiate and return the i-th form instance in a formset.\"\"\"\n  150          defaults = {\n  151              'auto_id': self.auto_id,\n  ...\n  154              # Don't render the HTML 'required' attribute as it may cause\n  155              # incorrect validation for extra, optional, and deleted\n  156:             # forms in the formset.\n  157              'use_required_attribute': False,\n  158          }\n  ...\n  165              except IndexError:\n  166                  pass\n  167:         # Allow extra forms to be empty, unless they're part of\n  168:         # the minimum forms.\n  169          if i >= self.initial_form_count() and i >= self.min_num:\n  170              defaults['empty_permitted'] = True\n  ...\n  175  \n  176      @property\n  177:     def initial_forms(self):\n  178:         \"\"\"Return a list of all the initial forms in this formset.\"\"\"\n  179:         return self.forms[:self.initial_form_count()]\n  180  \n  181      @property\n  182:     def extra_forms(self):\n  183:         \"\"\"Return a list of all the extra forms in this formset.\"\"\"\n  184:         return self.forms[self.initial_form_count():]\n  185  \n  186      @property\n  ...\n  199      def cleaned_data(self):\n  200          \"\"\"\n  201:         Return a list of form.cleaned_data dicts for every form in self.forms.\n  202          \"\"\"\n  203          if not self.is_valid():\n  204              raise AttributeError(\"'%s' object has no attribute 'cleaned_data'\" % self.__class__.__name__)\n  205:         return [form.cleaned_data for form in self.forms]\n  206  \n  207      @property\n  208:     def deleted_forms(self):\n  209:         \"\"\"Return a list of forms that have been marked for deletion.\"\"\"\n  210          if not self.is_valid() or not self.can_delete:\n  211              return []\n  ...\n  215              self._deleted_form_indexes = []\n  216              for i in range(0, self.total_form_count()):\n  217:                 form = self.forms[i]\n  218                  # if this is an extra form and hasn't changed, don't consider it\n  219                  if i >= self.initial_form_count() and not form.has_changed():\n  ...\n  221                  if self._should_delete_form(form):\n  222                      self._deleted_form_indexes.append(i)\n  223:         return [self.forms[i] for i in self._deleted_form_indexes]\n  224  \n  225      @property\n  226:     def ordered_forms(self):\n  227          \"\"\"\n  228          Return a list of form in the order specified by the incoming data.\n  ...\n  230          \"\"\"\n  231          if not self.is_valid() or not self.can_order:\n  232:             raise AttributeError(\"'%s' object has no attribute 'ordered_forms'\" % self.__class__.__name__)\n  233          # Construct _ordering, which is a list of (form_index, order_field_value)\n  234          # tuples. After constructing this list, we'll sort it by order_field_value\n  ...\n  238              self._ordering = []\n  239              for i in range(0, self.total_form_count()):\n  240:                 form = self.forms[i]\n  241                  # if this is an extra form and hasn't changed, don't consider it\n  242                  if i >= self.initial_form_count() and not form.has_changed():\n  ...\n  259          # Return a list of form.cleaned_data dicts in the order specified by\n  260          # the form data.\n  261:         return [self.forms[i[0]] for i in self._ordering]\n  262  \n  263      @classmethod\n  ...\n  268          \"\"\"\n  269          Return an ErrorList of errors that aren't associated with a particular\n  270:         form -- i.e., from formset.clean(). Return an empty ErrorList if there\n  271          are none.\n  272          \"\"\"\n  ...\n  277      @property\n  278      def errors(self):\n  279:         \"\"\"Return a list of form.errors for every form in self.forms.\"\"\"\n  280          if self._errors is None:\n  281              self.full_clean()\n  ...\n  283  \n  284      def total_error_count(self):\n  285:         \"\"\"Return the number of errors across all forms in the formset.\"\"\"\n  286          return len(self.non_form_errors()) +\\\n  287              sum(len(form_errors) for form_errors in self.errors)\n  ...\n  292  \n  293      def is_valid(self):\n  294:         \"\"\"Return True if every form in self.forms is valid.\"\"\"\n  295          if not self.is_bound:\n  296              return False\n  297          # We loop over every form.errors here rather than short circuiting on the\n  298          # first failure to make sure validation gets triggered for every form.\n  299:         forms_valid = True\n  300          # This triggers a full clean.\n  301          self.errors\n  302          for i in range(0, self.total_form_count()):\n  303:             form = self.forms[i]\n  304              if self.can_delete and self._should_delete_form(form):\n  305                  # This form is going to be deleted so any of its errors\n  306:                 # shouldn't cause the entire formset to be invalid.\n  307                  continue\n  308:             forms_valid &= form.is_valid()\n  309:         return forms_valid and not self.non_form_errors()\n  310  \n  311      def full_clean(self):\n  ...\n  316          self._errors = []\n  317          self._non_form_errors = self.error_class()\n  318:         empty_forms_count = 0\n  319  \n  320          if not self.is_bound:  # Stop further processing.\n  321              return\n  322          for i in range(0, self.total_form_count()):\n  323:             form = self.forms[i]\n  324:             # Empty forms are unchanged forms beyond those with initial data.\n  325              if not form.has_changed() and i >= self.initial_form_count():\n  326:                 empty_forms_count += 1\n  327              # Accessing errors calls full_clean() if necessary.\n  328              # _should_delete_form() requires cleaned_data.\n  ...\n  333          try:\n  334              if (self.validate_max and\n  335:                     self.total_form_count() - len(self.deleted_forms) > self.max_num) or \\\n  336                      self.management_form.cleaned_data[TOTAL_FORM_COUNT] > self.absolute_max:\n  337                  raise ValidationError(ngettext(\n  338:                     \"Please submit %d or fewer forms.\",\n  339:                     \"Please submit %d or fewer forms.\", self.max_num) % self.max_num,\n  340:                     code='too_many_forms',\n  341                  )\n  342              if (self.validate_min and\n  343:                     self.total_form_count() - len(self.deleted_forms) - empty_forms_count < self.min_num):\n  344                  raise ValidationError(ngettext(\n  345:                     \"Please submit %d or more forms.\",\n  346:                     \"Please submit %d or more forms.\", self.min_num) % self.min_num,\n  347:                     code='too_few_forms')\n  348              # Give self.clean() a chance to do cross-form validation.\n  349              self.clean()\n  ...\n  353      def clean(self):\n  354          \"\"\"\n  355:         Hook for doing any extra formset-wide cleaning after Form.clean() has\n  356          been called on every form. Any ValidationError raised by this method\n  357          will not be associated with a particular form; it will be accessible\n  358:         via formset.non_form_errors()\n  359          \"\"\"\n  360          pass\n  ...\n  367          \"\"\"A hook for adding extra fields on to each form instance.\"\"\"\n  368          if self.can_order:\n  369:             # Only pre-fill the ordering field for initial forms.\n  370              if index is not None and index < self.initial_form_count():\n  371                  form.fields[ORDERING_FIELD_NAME] = IntegerField(label=_('Order'), initial=index + 1, required=False)\n  ...\n  380      def is_multipart(self):\n  381          \"\"\"\n  382:         Return True if the formset needs to be multipart, i.e. it\n  383          has FileInput, or False otherwise.\n  384          \"\"\"\n  385:         if self.forms:\n  386:             return self.forms[0].is_multipart()\n  387          else:\n  388              return self.empty_form.is_multipart()\n  ...\n  390      @property\n  391      def media(self):\n  392:         # All the forms on a FormSet are the same, so you only need to\n  393          # interrogate the first form for media.\n  394:         if self.forms:\n  395:             return self.forms[0].media\n  396          else:\n  397              return self.empty_form.media\n  398  \n  399      def as_table(self):\n  400:         \"Return this formset rendered as HTML <tr>s -- excluding the <table></table>.\"\n  401:         # XXX: there is no semantic division between forms here, there\n  402          # probably should be. It might make sense to render each form as a\n  403          # table row with each field as a td.\n  404:         forms = ' '.join(form.as_table() for form in self)\n  405:         return mark_safe(str(self.management_form) + '\\n' + forms)\n  406  \n  407      def as_p(self):\n  408:         \"Return this formset rendered as HTML <p>s.\"\n  409:         forms = ' '.join(form.as_p() for form in self)\n  410:         return mark_safe(str(self.management_form) + '\\n' + forms)\n  411  \n  412      def as_ul(self):\n  413:         \"Return this formset rendered as HTML <li>s.\"\n  414:         forms = ' '.join(form.as_ul() for form in self)\n  415:         return mark_safe(str(self.management_form) + '\\n' + forms)\n  416  \n  417  \n  418: def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,\n  419                      can_delete=False, max_num=None, validate_max=False,\n  420                      min_num=None, validate_min=False):\n  421:     \"\"\"Return a FormSet for the given form class.\"\"\"\n  422      if min_num is None:\n  423          min_num = DEFAULT_MIN_NUM\n  424      if max_num is None:\n  425          max_num = DEFAULT_MAX_NUM\n  426:     # hard limit on forms instantiated, to prevent memory-exhaustion attacks\n  427      # limit is simply max_num + DEFAULT_MAX_NUM (which is 2*DEFAULT_MAX_NUM\n  428      # if max_num is None in the first place)\n  ...\n  433               'absolute_max': absolute_max, 'validate_min': validate_min,\n  434               'validate_max': validate_max}\n  435:     return type(form.__name__ + 'FormSet', (formset,), attrs)\n  436  \n  437  \n  438: def all_valid(formsets):\n  439:     \"\"\"Return True if every formset in formsets is valid.\"\"\"\n  440      valid = True\n  441:     for formset in formsets:\n  442:         if not formset.is_valid():\n  443              valid = False\n  444      return valid\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/forms/models.py:\n   10      NON_FIELD_ERRORS, FieldError, ImproperlyConfigured, ValidationError,\n   11  )\n   12: from django.forms.fields import ChoiceField, Field\n   13: from django.forms.forms import BaseForm, DeclarativeFieldsMetaclass\n   14: from django.forms.formsets import BaseFormSet, formset_factory\n   15: from django.forms.utils import ErrorList\n   16: from django.forms.widgets import (\n   17      HiddenInput, MultipleHiddenInput, SelectMultiple,\n   18  )\n   ..\n   23      'ModelForm', 'BaseModelForm', 'model_to_dict', 'fields_for_model',\n   24      'ModelChoiceField', 'ModelMultipleChoiceField', 'ALL_FIELDS',\n   25:     'BaseModelFormSet', 'modelformset_factory', 'BaseInlineFormSet',\n   26:     'inlineformset_factory', 'modelform_factory',\n   27  )\n   28  \n   ..\n   66  \n   67  \n   68: # ModelForms #################################################################\n   69  \n   70  def model_to_dict(instance, fields=None, exclude=None):\n   ..\n  550  \n  551  \n  552: # ModelFormSets ##############################################################\n  553  \n  554: class BaseModelFormSet(BaseFormSet):\n  555      \"\"\"\n  556:     A ``FormSet`` for editing a queryset and/or adding new objects to it.\n  557      \"\"\"\n  558      model = None\n  559  \n  560:     # Set of fields that must be unique among forms of this set.\n  561      unique_fields = set()\n  562  \n  ...\n  570  \n  571      def initial_form_count(self):\n  572:         \"\"\"Return the number of forms that are required in this FormSet.\"\"\"\n  573          if not (self.data or self.files):\n  574              return len(self.get_queryset())\n  ...\n  614                  kwargs['instance'] = self.get_queryset()[i]\n  615          elif self.initial_extra:\n  616:             # Set initial values for extra forms\n  617              try:\n  618                  kwargs['initial'] = self.initial_extra[i - self.initial_form_count()]\n  ...\n  632  \n  633              # If the queryset isn't already ordered we need to add an\n  634:             # artificial ordering here to make sure that all formsets\n  635              # constructed from this queryset have the same form order.\n  636              if not qs.ordered:\n  ...\n  662          \"\"\"\n  663          if not commit:\n  664:             self.saved_forms = []\n  665  \n  666              def save_m2m():\n  667:                 for form in self.saved_forms:\n  668                      form.save_m2m()\n  669              self.save_m2m = save_m2m\n  ...\n  676  \n  677      def validate_unique(self):\n  678:         # Collect unique_checks and date_checks to run from all the forms.\n  679          all_unique_checks = set()\n  680          all_date_checks = set()\n  681:         forms_to_delete = self.deleted_forms\n  682:         valid_forms = [form for form in self.forms if form.is_valid() and form not in forms_to_delete]\n  683:         for form in valid_forms:\n  684              exclude = form._get_validation_exclusions()\n  685              unique_checks, date_checks = form.instance._get_unique_checks(exclude=exclude)\n  ...\n  691          for uclass, unique_check in all_unique_checks:\n  692              seen_data = set()\n  693:             for form in valid_forms:\n  694:                 # Get the data for the set of fields that must be unique among the forms.\n  695                  row_data = (\n  696                      field if field in self.unique_fields else form.cleaned_data[field]\n  ...\n  717              seen_data = set()\n  718              uclass, lookup, field, unique_for = date_check\n  719:             for form in valid_forms:\n  720                  # see if we have data for both fields\n  721                  if (form.cleaned_data and form.cleaned_data[field] is not None and\n  ...\n  770          self.changed_objects = []\n  771          self.deleted_objects = []\n  772:         if not self.initial_forms:\n  773              return []\n  774  \n  775          saved_instances = []\n  776:         forms_to_delete = self.deleted_forms\n  777:         for form in self.initial_forms:\n  778              obj = form.instance\n  779              # If the pk is None, it means either:\n  780              # 1. The object is an unexpected empty model, created by invalid\n  781:             #    POST data such as an object outside the formset's queryset.\n  782              # 2. The object was already deleted from the database.\n  783              if obj.pk is None:\n  784                  continue\n  785:             if form in forms_to_delete:\n  786                  self.deleted_objects.append(obj)\n  787                  self.delete_existing(obj, commit=commit)\n  ...\n  790                  saved_instances.append(self.save_existing(form, obj, commit=commit))\n  791                  if not commit:\n  792:                     self.saved_forms.append(form)\n  793          return saved_instances\n  794  \n  795      def save_new_objects(self, commit=True):\n  796          self.new_objects = []\n  797:         for form in self.extra_forms:\n  798              if not form.has_changed():\n  799                  continue\n  ...\n  804              self.new_objects.append(self.save_new(form, commit=commit))\n  805              if not commit:\n  806:                 self.saved_forms.append(form)\n  807          return self.new_objects\n  808  \n  ...\n  851  \n  852  \n  853: def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n  854:                          formset=BaseModelFormSet, extra=1, can_delete=False,\n  855                           can_order=False, max_num=None, fields=None, exclude=None,\n  856                           widgets=None, validate_max=False, localized_fields=None,\n  857                           labels=None, help_texts=None, error_messages=None,\n  858                           min_num=None, validate_min=False, field_classes=None):\n  859:     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n  860      meta = getattr(form, 'Meta', None)\n  861      if (getattr(meta, 'fields', fields) is None and\n  862              getattr(meta, 'exclude', exclude) is None):\n  863          raise ImproperlyConfigured(\n  864:             \"Calling modelformset_factory without defining 'fields' or \"\n  865              \"'exclude' explicitly is prohibited.\"\n  866          )\n  ...\n  871                               labels=labels, help_texts=help_texts,\n  872                               error_messages=error_messages, field_classes=field_classes)\n  873:     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n  874                                can_order=can_order, can_delete=can_delete,\n  875                                validate_min=validate_min, validate_max=validate_max)\n  876:     FormSet.model = model\n  877:     return FormSet\n  878  \n  879  \n  880: # InlineFormSets #############################################################\n  881  \n  882: class BaseInlineFormSet(BaseModelFormSet):\n  883:     \"\"\"A formset for child objects related to a parent.\"\"\"\n  884      def __init__(self, data=None, files=None, instance=None,\n  885                   save_as_new=False, prefix=None, queryset=None, **kwargs):\n  ...\n  939      def save_new(self, form, commit=True):\n  940          # Ensure the latest copy of the related instance is present on each\n  941:         # form (it may have been saved after the formset was originally\n  942          # instantiated).\n  943          setattr(form.instance, self.fk.name, self.instance)\n  ...\n  949          if commit:\n  950              obj.save()\n  951:         # form.save_m2m() can be called via the formset later on if commit=False\n  952          if commit and hasattr(form, 'save_m2m'):\n  953              form.save_m2m()\n  ...\n 1041  \n 1042  \n 1043: def inlineformset_factory(parent_model, model, form=ModelForm,\n 1044:                           formset=BaseInlineFormSet, fk_name=None,\n 1045                            fields=None, exclude=None, extra=3, can_order=False,\n 1046                            can_delete=True, max_num=None, formfield_callback=None,\n ....\n 1049                            min_num=None, validate_min=False, field_classes=None):\n 1050      \"\"\"\n 1051:     Return an ``InlineFormSet`` for the given kwargs.\n 1052  \n 1053      ``fk_name`` must be provided if ``model`` has more than one ``ForeignKey``\n ....\n 1061          'form': form,\n 1062          'formfield_callback': formfield_callback,\n 1063:         'formset': formset,\n 1064          'extra': extra,\n 1065          'can_delete': can_delete,\n ....\n 1078          'field_classes': field_classes,\n 1079      }\n 1080:     FormSet = modelformset_factory(model, **kwargs)\n 1081:     FormSet.fk = fk\n 1082:     return FormSet\n 1083  \n 1084  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/forms/renderers.py:\n   41              'APP_DIRS': True,\n   42              'DIRS': [os.path.join(ROOT, self.backend.app_dirname)],\n   43:             'NAME': 'djangoforms',\n   44              'OPTIONS': {},\n   45          })\n   ..\n   49      \"\"\"\n   50      Load Django templates from the built-in widget templates in\n   51:     django/forms/templates and from apps' 'templates' directory.\n   52      \"\"\"\n   53      backend = DjangoTemplates\n   ..\n   57      \"\"\"\n   58      Load Jinja2 templates from the built-in widget templates in\n   59:     django/forms/jinja2 and from apps' 'jinja2' directory.\n   60      \"\"\"\n   61      backend = Jinja2\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/forms/widgets.py:\n   10  \n   11  from django.conf import settings\n   12: from django.forms.utils import to_current_timezone\n   13  from django.templatetags.static import static\n   14  from django.utils import datetime_safe, formats\n   ..\n  278      \"\"\"\n  279      input_type = None  # Subclasses must define this.\n  280:     template_name = 'django/forms/widgets/input.html'\n  281  \n  282      def __init__(self, attrs=None):\n  ...\n  294  class TextInput(Input):\n  295      input_type = 'text'\n  296:     template_name = 'django/forms/widgets/text.html'\n  297  \n  298  \n  299  class NumberInput(Input):\n  300      input_type = 'number'\n  301:     template_name = 'django/forms/widgets/number.html'\n  302  \n  303  \n  304  class EmailInput(Input):\n  305      input_type = 'email'\n  306:     template_name = 'django/forms/widgets/email.html'\n  307  \n  308  \n  309  class URLInput(Input):\n  310      input_type = 'url'\n  311:     template_name = 'django/forms/widgets/url.html'\n  312  \n  313  \n  314  class PasswordInput(Input):\n  315      input_type = 'password'\n  316:     template_name = 'django/forms/widgets/password.html'\n  317  \n  318      def __init__(self, attrs=None, render_value=False):\n  ...\n  328  class HiddenInput(Input):\n  329      input_type = 'hidden'\n  330:     template_name = 'django/forms/widgets/hidden.html'\n  331  \n  332  \n  ...\n  336      of values.\n  337      \"\"\"\n  338:     template_name = 'django/forms/widgets/multiple_hidden.html'\n  339  \n  340      def get_context(self, name, value, attrs):\n  ...\n  371      input_type = 'file'\n  372      needs_multipart_form = True\n  373:     template_name = 'django/forms/widgets/file.html'\n  374  \n  375      def format_value(self, value):\n  ...\n  392      initial_text = _('Currently')\n  393      input_text = _('Change')\n  394:     template_name = 'django/forms/widgets/clearable_file_input.html'\n  395  \n  396      def clear_checkbox_name(self, name):\n  ...\n  459  \n  460  class Textarea(Widget):\n  461:     template_name = 'django/forms/widgets/textarea.html'\n  462  \n  463      def __init__(self, attrs=None):\n  ...\n  483  class DateInput(DateTimeBaseInput):\n  484      format_key = 'DATE_INPUT_FORMATS'\n  485:     template_name = 'django/forms/widgets/date.html'\n  486  \n  487  \n  488  class DateTimeInput(DateTimeBaseInput):\n  489      format_key = 'DATETIME_INPUT_FORMATS'\n  490:     template_name = 'django/forms/widgets/datetime.html'\n  491  \n  492  \n  493  class TimeInput(DateTimeBaseInput):\n  494      format_key = 'TIME_INPUT_FORMATS'\n  495:     template_name = 'django/forms/widgets/time.html'\n  496  \n  497  \n  ...\n  503  class CheckboxInput(Input):\n  504      input_type = 'checkbox'\n  505:     template_name = 'django/forms/widgets/checkbox.html'\n  506  \n  507      def __init__(self, attrs=None, check_test=None):\n  ...\n  668  class Select(ChoiceWidget):\n  669      input_type = 'select'\n  670:     template_name = 'django/forms/widgets/select.html'\n  671:     option_template_name = 'django/forms/widgets/select_option.html'\n  672      add_id_index = False\n  673      checked_attribute = {'selected': True}\n  ...\n  748  class RadioSelect(ChoiceWidget):\n  749      input_type = 'radio'\n  750:     template_name = 'django/forms/widgets/radio.html'\n  751:     option_template_name = 'django/forms/widgets/radio_option.html'\n  752  \n  753  \n  ...\n  755      allow_multiple_selected = True\n  756      input_type = 'checkbox'\n  757:     template_name = 'django/forms/widgets/checkbox_select.html'\n  758:     option_template_name = 'django/forms/widgets/checkbox_option.html'\n  759  \n  760      def use_required_attribute(self, initial):\n  ...\n  788      You'll probably want to use this class with MultiValueField.\n  789      \"\"\"\n  790:     template_name = 'django/forms/widgets/multiwidget.html'\n  791  \n  792      def __init__(self, widgets, attrs=None):\n  ...\n  877      \"\"\"\n  878      supports_microseconds = False\n  879:     template_name = 'django/forms/widgets/splitdatetime.html'\n  880  \n  881      def __init__(self, attrs=None, date_format=None, time_format=None, date_attrs=None, time_attrs=None):\n  ...\n  903      A widget that splits datetime input into two <input type=\"hidden\"> inputs.\n  904      \"\"\"\n  905:     template_name = 'django/forms/widgets/splithiddendatetime.html'\n  906  \n  907      def __init__(self, attrs=None, date_format=None, time_format=None, date_attrs=None, time_attrs=None):\n  ...\n  922      day_field = '%s_day'\n  923      year_field = '%s_year'\n  924:     template_name = 'django/forms/widgets/select_date.html'\n  925      input_type = 'select'\n  926      select_widget = Select\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/template/library.py:\n  227          new_context = context.new(_dict)\n  228          # Copy across the CSRF token, if present, because inclusion tags are\n  229:         # often used for forms, and we need instructions for using CSRF\n  230          # protection to be as simple as possible.\n  231          csrf_token = context.get('csrf_token')\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/templatetags/i18n.py:\n  341      This will only mark for translation, but will return\n  342      the string unchanged. Use it when you need to store\n  343:     values into forms that should be translated later on.\n  344  \n  345      You can use variables instead of constant strings\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/test/runner.py:\n  211          if err is not None:\n  212              # Call check_picklable() before check_subtest_picklable() since\n  213:             # check_picklable() performs the tblib check.\n  214              self.check_picklable(test, err)\n  215              self.check_subtest_picklable(test, subtest)\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/test/signals.py:\n   98          from django.template.engine import Engine\n   99          Engine.get_default.cache_clear()\n  100:         from django.forms.renderers import get_default_renderer\n  101          get_default_renderer.cache_clear()\n  102  \n  ...\n  193              backends.UserModel = UserModel\n  194  \n  195:             from django.contrib.auth import forms\n  196:             forms.UserModel = UserModel\n  197  \n  198              from django.contrib.auth.handlers import modwsgi\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/test/testcases.py:\n   24  from django.core.servers.basehttp import ThreadedWSGIServer, WSGIRequestHandler\n   25  from django.db import DEFAULT_DB_ALIAS, connection, connections, transaction\n   26: from django.forms.fields import CharField\n   27  from django.http import QueryDict\n   28  from django.http.request import split_domain_port, validate_host\n   ..\n  435              self.fail(msg_prefix + \"The form '%s' was not used to render the response\" % form)\n  436  \n  437:     def assertFormsetError(self, response, formset, form_index, field, errors,\n  438                             msg_prefix=''):\n  439          \"\"\"\n  440:         Assert that a formset used to render the response has a specific error.\n  441  \n  442          For field errors, specify the ``form_index`` and the ``field``.\n  ...\n  460  \n  461          # Search all contexts for the error.\n  462:         found_formset = False\n  463          for i, context in enumerate(contexts):\n  464:             if formset not in context:\n  465                  continue\n  466:             found_formset = True\n  467              for err in errors:\n  468                  if field is not None:\n  469:                     if field in context[formset].forms[form_index].errors:\n  470:                         field_errors = context[formset].forms[form_index].errors[field]\n  471                          self.assertTrue(\n  472                              err in field_errors,\n  473:                             msg_prefix + \"The field '%s' on formset '%s', \"\n  474                              \"form %d in context %d does not contain the \"\n  475                              \"error '%s' (actual errors: %s)\" %\n  476:                             (field, formset, form_index, i, err, repr(field_errors))\n  477                          )\n  478:                     elif field in context[formset].forms[form_index].fields:\n  479                          self.fail(\n  480:                             msg_prefix + \"The field '%s' on formset '%s', form %d in context %d contains no errors\"\n  481:                             % (field, formset, form_index, i)\n  482                          )\n  483                      else:\n  484                          self.fail(\n  485:                             msg_prefix + \"The formset '%s', form %d in context %d does not contain the field '%s'\"\n  486:                             % (formset, form_index, i, field)\n  487                          )\n  488                  elif form_index is not None:\n  489:                     non_field_errors = context[formset].forms[form_index].non_field_errors()\n  490                      self.assertFalse(\n  491                          len(non_field_errors) == 0,\n  492:                         msg_prefix + \"The formset '%s', form %d in context %d \"\n  493:                         \"does not contain any non-field errors.\" % (formset, form_index, i)\n  494                      )\n  495                      self.assertTrue(\n  496                          err in non_field_errors,\n  497:                         msg_prefix + \"The formset '%s', form %d in context %d \"\n  498                          \"does not contain the non-field error '%s' (actual errors: %s)\"\n  499:                         % (formset, form_index, i, err, repr(non_field_errors))\n  500                      )\n  501                  else:\n  502:                     non_form_errors = context[formset].non_form_errors()\n  503                      self.assertFalse(\n  504                          len(non_form_errors) == 0,\n  505:                         msg_prefix + \"The formset '%s' in context %d does not \"\n  506:                         \"contain any non-form errors.\" % (formset, i)\n  507                      )\n  508                      self.assertTrue(\n  509                          err in non_form_errors,\n  510:                         msg_prefix + \"The formset '%s' in context %d does not \"\n  511                          \"contain the non-form error '%s' (actual errors: %s)\"\n  512:                         % (formset, i, err, repr(non_form_errors))\n  513                      )\n  514:         if not found_formset:\n  515:             self.fail(msg_prefix + \"The formset '%s' was not used to render the response\" % formset)\n  516  \n  517      def _assert_template_used(self, response, template_name, msg_prefix):\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/utils/autoreload.py:\n    6  # All rights reserved.\n    7  #\n    8: # Redistribution and use in source and binary forms, with or without modification,\n    9  # are permitted provided that the following conditions are met:\n   10  #\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/utils/datastructures.py:\n   60  \n   61      This class exists to solve the irritating problem raised by cgi.parse_qs,\n   62:     which returns a list for every key, even though most Web forms submit\n   63      single name-value pairs.\n   64      \"\"\"\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/utils/regex_helper.py:\n   41  def normalize(pattern):\n   42      r\"\"\"\n   43:     Given a reg-exp pattern, normalize it to an iterable of forms that\n   44      suffice for reverse matching. This does the following:\n   45  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/views/csrf.py:\n   62    <a\n   63    href=\"https://docs.djangoproject.com/en/{{ docs_version }}/ref/csrf/\">Django's\n   64:   CSRF mechanism</a> has not been used correctly.  For POST forms, you need to\n   65    ensure:</p>\n   66  \n   ..\n  131          'no_cookie1': _(\n  132              \"You are seeing this message because this site requires a CSRF \"\n  133:             \"cookie when submitting forms. This cookie is required for \"\n  134              \"security reasons, to ensure that your browser is not being \"\n  135              \"hijacked by third parties.\"),\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/views/i18n.py:\n  260          if '' in self.translation._catalog:\n  261              for line in self.translation._catalog[''].split('\\n'):\n  262:                 if line.startswith('Plural-Forms:'):\n  263                      return line.split(':', 1)[1].strip()\n  264          return None\n  ...\n  268          if plural is not None:\n  269              # This should be a compiled function of a typical plural-form:\n  270:             # Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 :\n  271              #               n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\n  272              plural = [el.strip() for el in plural.split(';') if el.strip().startswith('plural=')][0].split('=', 1)[1]\n  ...\n  329                  # Language formats for date, time, etc.\n  330              },\n  331:             \"plural\": '...'  # Expression for plural forms, or null.\n  332          }\n  333      \"\"\"\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/views/decorators/debug.py:\n   10      by hiding them when logging unhandled exceptions.\n   11  \n   12:     Accept two forms:\n   13  \n   14      * with specified variable names:\n   ..\n   45      by hiding them when logging unhandled exceptions.\n   46  \n   47:     Accept two forms:\n   48  \n   49      * with specified parameters:\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/django/views/generic/edit.py:\n    1  from django.core.exceptions import ImproperlyConfigured\n    2: from django.forms import models as model_forms\n    3  from django.http import HttpResponseRedirect\n    4  from django.views.generic.base import ContextMixin, TemplateResponseMixin, View\n    .\n   16  \n   17      def get_initial(self):\n   18:         \"\"\"Return the initial data to use for forms on this view.\"\"\"\n   19          return self.initial.copy()\n   20  \n   21      def get_prefix(self):\n   22:         \"\"\"Return the prefix to use for forms.\"\"\"\n   23          return self.prefix\n   24  \n   ..\n   99                  )\n  100  \n  101:             return model_forms.modelform_factory(model, fields=self.fields)\n  102  \n  103      def get_form_kwargs(self):\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_internal/pyproject.py:\n  136      assert build_system is not None\n  137  \n  138:     # Ensure that the build-system section in pyproject.toml conforms\n  139      # to PEP 518.\n  140      error_template = (\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_internal/req/req_file.py:\n  515  \n  516      1. Strings that contain a `$` aren't accidentally (partially) expanded.\n  517:     2. Ensure consistency across platforms for requirement files.\n  518  \n  519      These points are the result of a discussion on the `github pull\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_internal/utils/compatibility_tags.py:\n   14      interpreter_name,\n   15      interpreter_version,\n   16:     mac_platforms,\n   17  )\n   18  \n   ..\n   35  \n   36  \n   37: def _mac_platforms(arch):\n   38      # type: (str) -> List[str]\n   39      match = _osx_arch_pat.match(arch)\n   ..\n   48              # this as undocumented or deprecate it in the future.\n   49              '{}_{}'.format(name, arch[len('macosx_'):])\n   50:             for arch in mac_platforms(mac_version, actual_arch)\n   51          ]\n   52      else:\n   ..\n   56  \n   57  \n   58: def _custom_manylinux_platforms(arch):\n   59      # type: (str) -> List[str]\n   60      arches = [arch]\n   ..\n   78  \n   79  \n   80: def _get_custom_platforms(arch):\n   81      # type: (str) -> List[str]\n   82      arch_prefix, arch_sep, arch_suffix = arch.partition('_')\n   83      if arch.startswith('macosx'):\n   84:         arches = _mac_platforms(arch)\n   85      elif arch_prefix in ['manylinux2014', 'manylinux2010']:\n   86:         arches = _custom_manylinux_platforms(arch)\n   87      else:\n   88          arches = [arch]\n   ..\n  138          abis = [abi]\n  139  \n  140:     platforms = None  # type: Optional[List[str]]\n  141      if platform is not None:\n  142:         platforms = _get_custom_platforms(platform)\n  143  \n  144      is_cpython = (impl or interpreter_name()) == \"cp\"\n  ...\n  148                  python_version=python_version,\n  149                  abis=abis,\n  150:                 platforms=platforms,\n  151              )\n  152          )\n  ...\n  156                  interpreter=interpreter,\n  157                  abis=abis,\n  158:                 platforms=platforms,\n  159              )\n  160          )\n  ...\n  163              python_version=python_version,\n  164              interpreter=interpreter,\n  165:             platforms=platforms,\n  166          )\n  167      )\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/__init__.py:\n   52  # to our sys.path. This will cause all of this code to be a no-op typically\n   53  # however downstream redistributors can enable it in a consistent way across\n   54: # all platforms.\n   55  if DEBUNDLED:\n   56      # Actually look inside of WHEEL_DIR to find .whl files and add them to the\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/pyparsing.py:\n  254              xmlcharref = Regex(r'&#\\d+;')\n  255              xmlcharref.setParseAction(lambda t: '\\\\u' + hex(int(t[0][2:-1]))[2:])\n  256:             return xmlcharref.transformString(ret)\n  257  \n  258      # build list of single arg builtins, tolerant of Python version, that can be used as parse actions\n  ...\n  404          that failed to parse. These representations will be more helpful if you use `setName` to\n  405          give identifiable names to your expressions. Otherwise they will use the default string\n  406:         forms, which may be cryptic to read.\n  407  \n  408          explain() is only supported under Python 3.\n  ...\n 2031                  raise exc\n 2032  \n 2033:     def transformString(self, instring):\n 2034          \"\"\"\n 2035          Extension to :class:`scanString`, to modify matching text with modified tokens that may\n 2036:         be returned from a parse action.  To use ``transformString``, define a grammar and\n 2037          attach a parse action to it that modifies the returned token list.\n 2038:         Invoking ``transformString()`` on a target string will then scan for matches,\n 2039          and replace the matched text patterns according to the logic in the parse\n 2040:         action.  ``transformString()`` returns the resulting transformed string.\n 2041  \n 2042          Example::\n ....\n 2045              wd.setParseAction(lambda toks: toks[0].title())\n 2046  \n 2047:             print(wd.transformString(\"now is the winter of our discontent made glorious summer by this sun of york.\"))\n 2048  \n 2049          prints::\n ....\n 2054          lastE = 0\n 2055          # force preservation of <TAB>s, to minimize unwanted transformation of string, and to\n 2056:         # keep string locs straight between transformString and scanString\n 2057          self.keepTabs = True\n 2058          try:\n ....\n 2745              try:\n 2746                  # convert newline marks to actual newlines, and strip leading BOM if present\n 2747:                 t = NL.transformString(t.lstrip(BOM))\n 2748                  result = self.parseString(t, parseAll=parseAll)\n 2749              except ParseBaseException as pe:\n ....\n 3387  \n 3388              make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n 3389:             print(make_html.transformString(\"h1:main title:\"))\n 3390              # prints \"<h1>main title</h1>\"\n 3391          \"\"\"\n ....\n 5721      \"\"\"Helper method for common parse actions that simply return\n 5722      a literal value.  Especially useful when used with\n 5723:     :class:`transformString<ParserElement.transformString>` ().\n 5724  \n 5725      Example::\n ....\n 5756      which will convert the parsed data to an integer using base 16.\n 5757  \n 5758:     Example (compare the last to example in :class:`ParserElement.transformString`::\n 5759  \n 5760          hex_ints = OneOrMore(Word(hexnums)).setParseAction(tokenMap(int, 16))\n ....\n 6400      jump-starting parser development:\n 6401  \n 6402:      - numeric forms (:class:`integers<integer>`, :class:`reals<real>`,\n 6403         :class:`scientific notation<sci_real>`)\n 6404       - common :class:`programming identifiers<identifier>`\n ....\n 6678              More info at the pyparsing wiki page\n 6679          \"\"\"\n 6680:         return pyparsing_common._html_stripper.transformString(tokens[0])\n 6681  \n 6682      _commasepitem = Combine(OneOrMore(~Literal(\",\")\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/colorama/ansitowin32.py:\n  109          stream will not be affected, nor will win32 calls be issued, so\n  110          wrapping stdout is not actually required. This will generally be\n  111:         False on non-Windows platforms, unless optional functionality like\n  112          autoreset has been requested using kwargs to init()\n  113          '''\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/distlib/compat.py:\n  206      def which(cmd, mode=os.F_OK | os.X_OK, path=None):\n  207          \"\"\"Given a command, mode, and a PATH string, return the path which\n  208:         conforms to the given mode on the PATH, or None if there is no such\n  209          file.\n  210  \n  ...\n  251                  files = [cmd + ext for ext in pathext]\n  252          else:\n  253:             # On other platforms you don't have things like PATHEXT to tell you\n  254              # what file suffixes are executable, so just pass on cmd as-is.\n  255              files = [cmd]\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/distlib/locators.py:\n  110          self._cache = {}\n  111          self.scheme = scheme\n  112:         # Because of bugs in some of the handlers on some of the platforms,\n  113          # we use our own opener rather than just using urlopen.\n  114          self.opener = build_opener(RedirectHandler())\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/distlib/_backport/shutil.py:\n   81              return False\n   82  \n   83:     # All other platforms: check for same pathname.\n   84      return (os.path.normcase(os.path.abspath(src)) ==\n   85              os.path.normcase(os.path.abspath(dst)))\n   ..\n  178      You can set the optional ignore_dangling_symlinks flag to true if you\n  179      want to silence this exception. Notice that this has no effect on\n  180:     platforms that don't support os.symlink.\n  181  \n  182      The optional ignore argument is a callable. If given, it\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/distlib/_backport/sysconfig.py:\n  486              _CONFIG_VARS['abiflags'] = sys.abiflags\n  487          except AttributeError:\n  488:             # sys.abiflags may not be defined on all platforms.\n  489              _CONFIG_VARS['abiflags'] = ''\n  490  \n  ...\n  622         win32 (all others - specifically, sys.platform is returned)\n  623  \n  624:     For other non-POSIX platforms, currently just returns 'sys.platform'.\n  625      \"\"\"\n  626      if os.name == 'nt':\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/distlib/_backport/tarfile.py:\n 2102             given, tarinfo.size bytes are read from it and added to the archive.\n 2103             You can create TarInfo objects using gettarinfo().\n 2104:            On Windows platforms, `fileobj' should always be opened with mode\n 2105             'rb' to avoid irritation about the file size.\n 2106          \"\"\"\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/html5lib/_inputstream.py:\n   32      # Use one extra step of indirection and create surrogates with\n   33      # eval. Not using this indirection would introduce an illegal\n   34:     # unicode literal on platforms not supporting such lone\n   35      # surrogates.\n   36      assert invalid_unicode_no_surrogate[-1] == \"]\" and invalid_unicode_no_surrogate.count(\"]\") == 1\n   ..\n  178  \n  179          if not _utils.supports_lone_surrogates:\n  180:             # Such platforms will have already checked for such\n  181              # surrogate errors, so no need to do this checking.\n  182              self.reportCharacterErrors = None\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/html5lib/_utils.py:\n   16  \n   17  \n   18: # Platforms not supporting lone surrogates (\\uD800-\\uDFFF) should be\n   19  # caught by the below test. In general this would be any platform\n   20  # using UTF-16 as its encoding of unicode strings, such as\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/packaging/tags.py:\n  110      # type: (str) -> FrozenSet[Tag]\n  111      tags = set()\n  112:     interpreters, abis, platforms = tag.split(\"-\")\n  113      for interpreter in interpreters.split(\".\"):\n  114          for abi in abis.split(\".\"):\n  115:             for platform_ in platforms.split(\".\"):\n  116                  tags.add(Tag(interpreter, abi, platform_))\n  117      return frozenset(tags)\n  ...\n  199      python_version=None,  # type: Optional[PythonVersion]\n  200      abis=None,  # type: Optional[Iterable[str]]\n  201:     platforms=None,  # type: Optional[Iterable[str]]\n  202      **kwargs  # type: bool\n  203  ):\n  ...\n  237              pass\n  238  \n  239:     platforms = list(platforms or _platform_tags())\n  240      for abi in abis:\n  241:         for platform_ in platforms:\n  242              yield Tag(interpreter, abi, platform_)\n  243      if _abi3_applies(python_version):\n  244:         for tag in (Tag(interpreter, \"abi3\", platform_) for platform_ in platforms):\n  245              yield tag\n  246:     for tag in (Tag(interpreter, \"none\", platform_) for platform_ in platforms):\n  247          yield tag\n  248  \n  249      if _abi3_applies(python_version):\n  250          for minor_version in range(python_version[1] - 1, 1, -1):\n  251:             for platform_ in platforms:\n  252                  interpreter = \"cp{version}\".format(\n  253                      version=_version_nodot((python_version[0], minor_version))\n  ...\n  266      interpreter=None,  # type: Optional[str]\n  267      abis=None,  # type: Optional[Iterable[str]]\n  268:     platforms=None,  # type: Optional[Iterable[str]]\n  269      **kwargs  # type: bool\n  270  ):\n  ...\n  285      if abis is None:\n  286          abis = _generic_abi()\n  287:     platforms = list(platforms or _platform_tags())\n  288      abis = list(abis)\n  289      if \"none\" not in abis:\n  290          abis.append(\"none\")\n  291      for abi in abis:\n  292:         for platform_ in platforms:\n  293              yield Tag(interpreter, abi, platform_)\n  294  \n  ...\n  313      python_version=None,  # type: Optional[PythonVersion]\n  314      interpreter=None,  # type: Optional[str]\n  315:     platforms=None,  # type: Optional[Iterable[str]]\n  316  ):\n  317      # type: (...) -> Iterator[Tag]\n  ...\n  326      if not python_version:\n  327          python_version = sys.version_info[:2]\n  328:     platforms = list(platforms or _platform_tags())\n  329      for version in _py_interpreter_range(python_version):\n  330:         for platform_ in platforms:\n  331              yield Tag(version, \"none\", platform_)\n  332      if interpreter:\n  ...\n  375  \n  376  \n  377: def mac_platforms(version=None, arch=None):\n  378      # type: (Optional[MacVersion], Optional[str]) -> Iterator[str]\n  379      \"\"\"\n  ...\n  631  \n  632  \n  633: def _linux_platforms(is_32bit=_32_BIT_INTERPRETER):\n  634      # type: (bool) -> Iterator[str]\n  635      linux = _normalize_string(distutils.util.get_platform())\n  ...\n  664  \n  665  \n  666: def _generic_platforms():\n  667      # type: () -> Iterator[str]\n  668      yield _normalize_string(distutils.util.get_platform())\n  ...\n  675      \"\"\"\n  676      if platform.system() == \"Darwin\":\n  677:         return mac_platforms()\n  678      elif platform.system() == \"Linux\":\n  679:         return _linux_platforms()\n  680      else:\n  681:         return _generic_platforms()\n  682  \n  683  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py:\n  225      # Parsing functions and string utilities\n  226      'parse_requirements', 'parse_version', 'safe_name', 'safe_version',\n  227:     'get_platform', 'compatible_platforms', 'yield_lines', 'split_sections',\n  228      'safe_extra', 'to_filename', 'invalid_marker', 'evaluate_marker',\n  229  \n  ...\n  415  \n  416  \n  417: def compatible_platforms(provided, required):\n  418      \"\"\"Can code for the `provided` platform run on the `required` platform?\n  419  \n  420:     Returns true if either platform is ``None``, or the platforms are equal.\n  421  \n  422      XXX Needs compatibility checks for Linux and other unixy OSes.\n  ...\n  457          return True\n  458  \n  459:     # XXX Linux and other platforms' special cases should go here\n  460      return False\n  461  \n  ...\n  996              or dist.py_version == self.python\n  997          )\n  998:         return py_compat and compatible_platforms(dist.platform, self.platform)\n  999  \n 1000      def remove(self, dist):\n ....\n 1246          \"\"\"Perform any platform-specific postprocessing of `tempname`\n 1247  \n 1248:         This is where Mac header rewrites should be done; other platforms don't\n 1249          have anything special they should do.\n 1250  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/requests/help.py:\n   33      This function works best on CPython and PyPy: in particular, it probably\n   34      doesn't work for Jython or IronPython. Future investigation should be done\n   35:     to work out the correct shape of the code for those platforms.\n   36      \"\"\"\n   37      implementation = platform.python_implementation()\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/resolvelib/providers.py:\n   81  \n   82  class AbstractResolver(object):\n   83:     \"\"\"The thing that performs the actual resolution work.\n   84      \"\"\"\n   85  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/resolvelib/resolvers.py:\n  377  \n  378  class Resolver(AbstractResolver):\n  379:     \"\"\"The thing that performs the actual resolution work.\n  380      \"\"\"\n  381  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/urllib3/fields.py:\n  102  \n  103      .. _HTML5 Working Draft Section 4.10.22.7:\n  104:         https://w3c.github.io/html/sec-forms.html#multipart-form-data\n  105  \n  106      :param name:\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/urllib3/contrib/ntlmpool.py:\n   38  \n   39      def _new_conn(self):\n   40:         # Performs the NTLM handshake that secures the connection. The socket\n   41          # must be kept open while requests are performed.\n   42          self.num_connections += 1\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/urllib3/contrib/securetransport.py:\n  444      ):\n  445          \"\"\"\n  446:         Actually performs the TLS handshake. This is run automatically by\n  447          wrapped socket, and shouldn't be needed in user code.\n  448          \"\"\"\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pip/_vendor/urllib3/util/connection.py:\n   12          :class:`httplib.HTTPConnection` object.\n   13  \n   14:     Note: For platforms like AppEngine, this will always return ``False`` to\n   15      let the platform handle connection recycling transparently for us.\n   16      \"\"\"\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pkg_resources/__init__.py:\n  215      # Parsing functions and string utilities\n  216      'parse_requirements', 'parse_version', 'safe_name', 'safe_version',\n  217:     'get_platform', 'compatible_platforms', 'yield_lines', 'split_sections',\n  218      'safe_extra', 'to_filename', 'invalid_marker', 'evaluate_marker',\n  219  \n  ...\n  406  \n  407  \n  408: def compatible_platforms(provided, required):\n  409      \"\"\"Can code for the `provided` platform run on the `required` platform?\n  410  \n  411:     Returns true if either platform is ``None``, or the platforms are equal.\n  412  \n  413      XXX Needs compatibility checks for Linux and other unixy OSes.\n  ...\n  448          return True\n  449  \n  450:     # XXX Linux and other platforms' special cases should go here\n  451      return False\n  452  \n  ...\n  988              or dist.py_version == self.python\n  989          )\n  990:         return py_compat and compatible_platforms(dist.platform, self.platform)\n  991  \n  992      def remove(self, dist):\n  ...\n 1238          \"\"\"Perform any platform-specific postprocessing of `tempname`\n 1239  \n 1240:         This is where Mac header rewrites should be done; other platforms don't\n 1241          have anything special they should do.\n 1242  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/pkg_resources/_vendor/pyparsing.py:\n  147              xmlcharref = Regex(r'&#\\d+;')\n  148              xmlcharref.setParseAction(lambda t: '\\\\u' + hex(int(t[0][2:-1]))[2:])\n  149:             return xmlcharref.transformString(ret)\n  150  \n  151      # build list of single arg builtins, tolerant of Python version, that can be used as parse actions\n  ...\n 1690                  raise exc\n 1691  \n 1692:     def transformString( self, instring ):\n 1693          \"\"\"\n 1694          Extension to C{L{scanString}}, to modify matching text with modified tokens that may\n 1695:         be returned from a parse action.  To use C{transformString}, define a grammar and\n 1696          attach a parse action to it that modifies the returned token list.\n 1697:         Invoking C{transformString()} on a target string will then scan for matches,\n 1698          and replace the matched text patterns according to the logic in the parse\n 1699:         action.  C{transformString()} returns the resulting transformed string.\n 1700          \n 1701          Example::\n ....\n 1703              wd.setParseAction(lambda toks: toks[0].title())\n 1704              \n 1705:             print(wd.transformString(\"now is the winter of our discontent made glorious summer by this sun of york.\"))\n 1706          Prints::\n 1707              Now Is The Winter Of Our Discontent Made Glorious Summer By This Sun Of York.\n ....\n 1710          lastE = 0\n 1711          # force preservation of <TAB>s, to minimize unwanted transformation of string, and to\n 1712:         # keep string locs straight between transformString and scanString\n 1713          self.keepTabs = True\n 1714          try:\n ....\n 4757      \"\"\"\n 4758      Helper method for common parse actions that simply return a literal value.  Especially\n 4759:     useful when used with C{L{transformString<ParserElement.transformString>}()}.\n 4760  \n 4761      Example::\n ....\n 4789      parsed data to an integer using base 16.\n 4790  \n 4791:     Example (compare the last to example in L{ParserElement.transformString}::\n 4792          hex_ints = OneOrMore(Word(hexnums)).setParseAction(tokenMap(int, 16))\n 4793          hex_ints.runTests('''\n ....\n 5354      \"\"\"\n 5355      Here are some common low-level expressions that may be useful in jump-starting parser development:\n 5356:      - numeric forms (L{integers<integer>}, L{reals<real>}, L{scientific notation<sci_real>})\n 5357       - common L{programming identifiers<identifier>}\n 5358       - network addresses (L{MAC<mac_address>}, L{IPv4<ipv4_address>}, L{IPv6<ipv6_address>})\n ....\n 5611              print(table_text.parseString(text).body) # -> 'More info at the pyparsing wiki page'\n 5612          \"\"\"\n 5613:         return pyparsing_common._html_stripper.transformString(tokens[0])\n 5614  \n 5615      _commasepitem = Combine(OneOrMore(~Literal(\",\") + ~LineEnd() + Word(printables, excludeChars=',') \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/setuptools/config.py:\n  139  def parse_configuration(\n  140          distribution, command_options, ignore_option_errors=False):\n  141:     \"\"\"Performs additional parsing of configuration options\n  142      for a distribution.\n  143  \n  ...\n  490          'summary': 'description',\n  491          'classifier': 'classifiers',\n  492:         'platform': 'platforms',\n  493      }\n  494  \n  ...\n  514  \n  515          return {\n  516:             'platforms': parse_list,\n  517              'keywords': parse_list,\n  518              'provides': parse_list,\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/setuptools/depends.py:\n  161  def _update_globals():\n  162      \"\"\"\n  163:     Patch the globals to remove the objects not available on some platforms.\n  164  \n  165      XXX it'd be better to test assertions about bytecode instead.\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/setuptools/dist.py:\n  107          self.keywords = _read_field('keywords').split(',')\n  108  \n  109:     self.platforms = _read_list('platform')\n  110      self.classifiers = _read_list('classifier')\n  111  \n  ...\n  171  \n  172      if version >= StrictVersion('1.2'):\n  173:         for platform in self.get_platforms():\n  174              write_field('Platform', platform)\n  175      else:\n  176:         self._write_list(file, 'Platform', self.get_platforms())\n  177  \n  178      self._write_list(file, 'Classifier', self.get_classifiers())\n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/setuptools/msvc.py:\n   50  \n   51  _msvc9_suppress_errors = (\n   52:     # msvc9compiler isn't available on some platforms\n   53      ImportError,\n   54  \n   ..\n  961          if not sdkdir:\n  962              # If fail, use Platform SDK\n  963:             sdkdir = join(self.VCInstallDir, 'PlatformSDK')\n  964          return sdkdir\n  965  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/setuptools/_vendor/pyparsing.py:\n  170              xmlcharref = Regex(r'&#\\d+;')\n  171              xmlcharref.setParseAction(lambda t: '\\\\u' + hex(int(t[0][2:-1]))[2:])\n  172:             return xmlcharref.transformString(ret)\n  173  \n  174      # build list of single arg builtins, tolerant of Python version, that can be used as parse actions\n  ...\n 1727                  raise exc\n 1728  \n 1729:     def transformString( self, instring ):\n 1730          \"\"\"\n 1731          Extension to C{L{scanString}}, to modify matching text with modified tokens that may\n 1732:         be returned from a parse action.  To use C{transformString}, define a grammar and\n 1733          attach a parse action to it that modifies the returned token list.\n 1734:         Invoking C{transformString()} on a target string will then scan for matches,\n 1735          and replace the matched text patterns according to the logic in the parse\n 1736:         action.  C{transformString()} returns the resulting transformed string.\n 1737          \n 1738          Example::\n ....\n 1740              wd.setParseAction(lambda toks: toks[0].title())\n 1741              \n 1742:             print(wd.transformString(\"now is the winter of our discontent made glorious summer by this sun of york.\"))\n 1743          Prints::\n 1744              Now Is The Winter Of Our Discontent Made Glorious Summer By This Sun Of York.\n ....\n 1747          lastE = 0\n 1748          # force preservation of <TAB>s, to minimize unwanted transformation of string, and to\n 1749:         # keep string locs straight between transformString and scanString\n 1750          self.keepTabs = True\n 1751          try:\n ....\n 4798      \"\"\"\n 4799      Helper method for common parse actions that simply return a literal value.  Especially\n 4800:     useful when used with C{L{transformString<ParserElement.transformString>}()}.\n 4801  \n 4802      Example::\n ....\n 4830      parsed data to an integer using base 16.\n 4831  \n 4832:     Example (compare the last to example in L{ParserElement.transformString}::\n 4833          hex_ints = OneOrMore(Word(hexnums)).setParseAction(tokenMap(int, 16))\n 4834          hex_ints.runTests('''\n ....\n 5400      \"\"\"\n 5401      Here are some common low-level expressions that may be useful in jump-starting parser development:\n 5402:      - numeric forms (L{integers<integer>}, L{reals<real>}, L{scientific notation<sci_real>})\n 5403       - common L{programming identifiers<identifier>}\n 5404       - network addresses (L{MAC<mac_address>}, L{IPv4<ipv4_address>}, L{IPv6<ipv6_address>})\n ....\n 5657              print(table_text.parseString(text).body) # -> 'More info at the pyparsing wiki page'\n 5658          \"\"\"\n 5659:         return pyparsing_common._html_stripper.transformString(tokens[0])\n 5660  \n 5661      _commasepitem = Combine(OneOrMore(~Literal(\",\") + ~LineEnd() + Word(printables, excludeChars=',') \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/setuptools/_vendor/packaging/tags.py:\n   73  def parse_tag(tag):\n   74      tags = set()\n   75:     interpreters, abis, platforms = tag.split(\"-\")\n   76      for interpreter in interpreters.split(\".\"):\n   77          for abi in abis.split(\".\"):\n   78:             for platform_ in platforms.split(\".\"):\n   79                  tags.add(Tag(interpreter, abi, platform_))\n   80      return frozenset(tags)\n   ..\n  125  \n  126  \n  127: def _cpython_tags(py_version, interpreter, abis, platforms):\n  128      for abi in abis:\n  129:         for platform_ in platforms:\n  130              yield Tag(interpreter, abi, platform_)\n  131:     for tag in (Tag(interpreter, \"abi3\", platform_) for platform_ in platforms):\n  132          yield tag\n  133:     for tag in (Tag(interpreter, \"none\", platform_) for platform_ in platforms):\n  134          yield tag\n  135      # PEP 384 was first implemented in Python 3.2.\n  136      for minor_version in range(py_version[1] - 1, 1, -1):\n  137:         for platform_ in platforms:\n  138              interpreter = \"cp{major}{minor}\".format(\n  139                  major=py_version[0], minor=minor_version\n  ...\n  158  \n  159  \n  160: def _pypy_tags(py_version, interpreter, abi, platforms):\n  161:     for tag in (Tag(interpreter, abi, platform) for platform in platforms):\n  162          yield tag\n  163:     for tag in (Tag(interpreter, \"none\", platform) for platform in platforms):\n  164          yield tag\n  165  \n  166  \n  167: def _generic_tags(interpreter, py_version, abi, platforms):\n  168:     for tag in (Tag(interpreter, abi, platform) for platform in platforms):\n  169          yield tag\n  170      if abi != \"none\":\n  171:         tags = (Tag(interpreter, \"none\", platform_) for platform_ in platforms)\n  172          for tag in tags:\n  173              yield tag\n  ...\n  187  \n  188  \n  189: def _independent_tags(interpreter, py_version, platforms):\n  190      \"\"\"\n  191      Return the sequence of tags that are consistent across implementations.\n  ...\n  197      \"\"\"\n  198      for version in _py_interpreter_range(py_version):\n  199:         for platform_ in platforms:\n  200              yield Tag(version, \"none\", platform_)\n  201      yield Tag(interpreter, \"none\", \"any\")\n  ...\n  241  \n  242  \n  243: def _mac_platforms(version=None, arch=None):\n  244      version_str, _, cpu_arch = platform.mac_ver()\n  245      if version is None:\n  ...\n  247      if arch is None:\n  248          arch = _mac_arch(cpu_arch)\n  249:     platforms = []\n  250      for minor_version in range(version[1], -1, -1):\n  251          compat_version = version[0], minor_version\n  252          binary_formats = _mac_binary_formats(compat_version, arch)\n  253          for binary_format in binary_formats:\n  254:             platforms.append(\n  255                  \"macosx_{major}_{minor}_{binary_format}\".format(\n  256                      major=compat_version[0],\n  ...\n  259                  )\n  260              )\n  261:     return platforms\n  262  \n  263  \n  ...\n  331  \n  332  \n  333: def _linux_platforms(is_32bit=_32_BIT_INTERPRETER):\n  334      linux = _normalize_string(distutils.util.get_platform())\n  335      if linux == \"linux_x86_64\" and is_32bit:\n  ...\n  343      for name, glibc_version in manylinux_support_iter:\n  344          if _is_manylinux_compatible(name, glibc_version):\n  345:             platforms = [linux.replace(\"linux\", name)]\n  346              break\n  347      else:\n  348:         platforms = []\n  349      # Support for a later manylinux implies support for an earlier version.\n  350:     platforms += [linux.replace(\"linux\", name) for name, _ in manylinux_support_iter]\n  351:     platforms.append(linux)\n  352:     return platforms\n  353  \n  354  \n  355: def _generic_platforms():\n  356      platform = _normalize_string(distutils.util.get_platform())\n  357      return [platform]\n  ...\n  380      interpreter_name = _interpreter_name()\n  381      if platform.system() == \"Darwin\":\n  382:         platforms = _mac_platforms()\n  383      elif platform.system() == \"Linux\":\n  384:         platforms = _linux_platforms()\n  385      else:\n  386:         platforms = _generic_platforms()\n  387  \n  388      if interpreter_name == \"cp\":\n  389          interpreter = _cpython_interpreter(py_version)\n  390          abis = _cpython_abis(py_version)\n  391:         for tag in _cpython_tags(py_version, interpreter, abis, platforms):\n  392              yield tag\n  393      elif interpreter_name == \"pp\":\n  394          interpreter = _pypy_interpreter()\n  395          abi = _generic_abi()\n  396:         for tag in _pypy_tags(py_version, interpreter, abi, platforms):\n  397              yield tag\n  398      else:\n  399          interpreter = _generic_interpreter(interpreter_name, py_version)\n  400          abi = _generic_abi()\n  401:         for tag in _generic_tags(interpreter, py_version, abi, platforms):\n  402              yield tag\n  403:     for tag in _independent_tags(interpreter, py_version, platforms):\n  404          yield tag\n  405  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/wheel/pep425tags.py:\n  222      abis.append('none')\n  223  \n  224:     platforms = []\n  225      if supplied_platform:\n  226:         platforms.append(supplied_platform)\n  227:     platforms.append(get_platform(archive_root))\n  228  \n  229      # Current version, current API (built specifically for our Python):\n  230      for abi in abis:\n  231:         for arch in platforms:\n  232              supported.append(('%s%s' % (impl, versions[0]), abi, arch))\n  233  \n  ...\n  238              break\n  239          for abi in abi3s:   # empty set if not Python 3\n  240:             for arch in platforms:\n  241                  supported.append((\"%s%s\" % (impl, version), abi, arch))\n  242  \n  ...\n  250  \n  251      # Major Python version + platform; e.g. binaries not using the Python API\n  252:     for arch in platforms:\n  253          supported.append(('py%s' % (versions[0][0]), 'none', arch))\n  254  \n\n/home/deekshith/Dev/trydjango/lib/python3.6/site-packages/wheel/cli/pack.py:\n   67      impls = sorted({tag.split('-')[0] for tag in tags})\n   68      abivers = sorted({tag.split('-')[1] for tag in tags})\n   69:     platforms = sorted({tag.split('-')[2] for tag in tags})\n   70:     tagline = '-'.join(['.'.join(impls), '.'.join(abivers), '.'.join(platforms)])\n   71  \n   72      # Repack the wheel\n\n965 matches across 118 files\n",
			"settings":
			{
				"buffer_size": 156511,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "products/views.py",
			"settings":
			{
				"buffer_size": 1386,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/deekshith/Downloads/Test JSON (1).json",
			"settings":
			{
				"buffer_size": 817,
				"line_ending": "Unix"
			}
		},
		{
			"file": "products/admin.py",
			"settings":
			{
				"buffer_size": 252,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/deekshith/Pictures/hr_dashboard-10.0.1.1.0/hr_dashboard",
		"/home/deekshith/Dev/trydjango",
		"/home/deekshith/Dev/trydjango/src",
		"/home/deekshith/Dev/trydjango/src/products",
		"/home/deekshith/Dev/trydjango/src/trydjango"
	],
	"file_history":
	[
		"/home/deekshith/Dev/trydjango/src/trydjango/settings.py",
		"/home/deekshith/Dev/trydjango/src/trydjango/urls.py",
		"/home/deekshith/Dev/trydjango/src/products/models.py",
		"/home/deekshith/Downloads/web_list_view_sticky-9.0.1/web_list_view_sticky/static/src/js/web_list_view_sticky.js",
		"/home/deekshith/Downloads/web_list_view_sticky-8.0.1.2/web_list_view_sticky/static/src/js/web_list_view_sticky.js",
		"/home/deekshith/Downloads/muk_dms-10.0.1.2.1/muk_web_client/static/src/js/client_channels.js",
		"/home/deekshith/Downloads/muk_dms-10.0.1.2.1/muk_web_client_refresh/models/refresh_rule.py",
		"/home/deekshith/Downloads/muk_dms-10.0.1.2.1/muk_dms/static/src/js/preview_helper.js",
		"/home/deekshith/Downloads/muk_dms-10.0.1.2.1/muk_dms/static/src/js/dms_widgets_size.js",
		"/home/deekshith/Downloads/muk_dms-10.0.1.2.1/muk_dms/static/src/js/dms_widgets_many2one.js",
		"/home/deekshith/Downloads/muk_dms-10.0.1.2.1/muk_dms/static/src/js/dms_views_documents.js",
		"/home/deekshith/Downloads/muk_dms-10.0.1.2.1/muk_dms/static/src/js/dms_views_directory.js",
		"/home/deekshith/Downloads/muk_dms-10.0.1.2.1/muk_dms/static/src/js/client_refresh.js",
		"/home/deekshith/Downloads/web_list_view_sticky-9.0.1/web_list_view_sticky/static/lib/sticky_table_header/sticky_table_headers.js",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/lead_products/models/lead_product.py",
		"/home/deekshith/Pictures/hr_dashboard-10.0.1.1.0/hr_dashboard/static/src/js/hr_dashboard.js",
		"/home/deekshith/Pictures/hr_dashboard-10.0.1.1.0/hr_dashboard/static/src/xml/hr_dashboard.xml",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/extra_fields_lead_new/extra_fields.xml",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/crm_partner_interlink/crm_partner_interlink.xml",
		"/home/deekshith/Downloads/Saffron Files/projects/schoobit-erp/trunk/schoobit_exams/views/exam_view.xml",
		"/home/deekshith/Downloads/Saffron Files/projects/schoobit-erp/trunk/schoobit_exams/views/marksheet_register_view.xml",
		"/home/deekshith/Downloads/Saffron Files/projects/schoobit-erp/trunk/schoobit_exams/views/marksheet_line_view.xml",
		"/home/deekshith/Downloads/Saffron Files/projects/schoobit-erp/trunk/schoobit_exams/models/exam.py",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/extra_fields_lead_new/extra_fields.py",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/sale_report/wizard/sales_report_wiz.py",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/extra_fields_partner_new/extra_fields.py",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/extra_fields_partner_new/extra_fields.xml",
		"/home/deekshith/Downloads/de_order_approval-13.0.0.5/de_order_approval/controllers/controllers.py",
		"/home/deekshith/Downloads/document_management/models/document_management.pyc",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/tranquil_sms_api/models/res_partner.py",
		"/home/deekshith/Desktop/newera_fields/emp_views.xml",
		"/home/deekshith/Desktop/newera_fields/emp.py",
		"/home/deekshith/Desktop/crm_prime_cont/crm_prime_cont.xml",
		"/home/deekshith/Desktop/extra_fields_lead_new/extra_fields.py",
		"/home/deekshith/Downloads/document_management/models/document_schedular.py",
		"/home/deekshith/Downloads/Saffron Files/projects/schoobit-erp/trunk/schoobit_fees/wizard/register_payment_wiz.py",
		"/home/deekshith/Downloads/Saffron Files/projects/schoobit-erp/trunk/schoobit_fees/wizard/register_pay_wiz_view.xml",
		"/home/deekshith/Downloads/Saffron Files/projects/schoobit-erp/trunk/schoobit_fees/views/student_fee_view.xml",
		"/home/deekshith/Downloads/Saffron Files/projects/schoobit-erp/trunk/schoobit_core/models/course.py",
		"/home/deekshith/Downloads/Saffron Files/projects/schoobit-erp/trunk/schoobit_core/models/batch.py",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/time_track/models/__init__.py",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/lead_products/views/opportunity_pdt_views.xml",
		"/home/deekshith/Desktop/time_track/models/time_track.py",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/time_track/models/time_track.py",
		"/home/deekshith/Downloads/Saffron Files/projects/schoobit-erp/trunk/schoobit_hr/reports/attendance_report.py",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/extra_fields_partner_new/extra_fields.py.save",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/tranquil_sms_api/security/ir.model.access.csv",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/tranquil_sms_api/__manifest__.py",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/tranquil_sms_api/models/delivery_report.py",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/tranquil_sms_api/views/res_partner_view.xml",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/terms_conditions/extra_fields.py",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/var/log/odoo/odoo-server.log",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/etc/init.d/odoo-server",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/etc/odoo-server.conf",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/sale_report/__openerp__.py",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/sale_report/wizard/__init__.py",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/sale_report/__init__.py",
		"/run/user/1000/gvfs/sftp:host=51.38.186.154,user=root/odoo/odoo-server/addons/sale_report/wizard/sales_report_wiz_view.xml",
		"/opt/odoo/odoo/addons-extra/sale_report/wizard/sales_report_wiz_view.xml",
		"/opt/odoo/odoo/addons-extra/sale_report/wizard/sales_report_wiz.py",
		"/opt/odoo/odoo/addons-extra/time_track/models/crm_alert.py",
		"/opt/odoo/odoo/addons-extra/sample_kit/views/menu_view.xml",
		"/opt/odoo/odoo/addons-extra/sample_kit/wizard/sample_request_report_xls.py",
		"/opt/odoo/odoo/addons-extra/team_members/team_members.py",
		"/opt/odoo/odoo/addons-extra/sample_kit/wizard/sample_rqst_report_view_xls.xml",
		"/opt/odoo/odoo/addons-extra/extra_fields_lead_new/extra_fields.xml",
		"/opt/odoo/odoo/addons/account/demo/account_demo.xml",
		"/opt/odoo/odoo/addons/account/security/account_security.xml",
		"/opt/odoo/odoo/odoo/addons/base/module/module_data.xml",
		"/opt/odoo/odoo/addons/analytic/security/analytic_security.xml",
		"/opt/odoo/odoo/addons/mail/data/mail_data.xml",
		"/opt/odoo/odoo/addons-extra/crm_partner_interlink/crm_partner_interlink.py",
		"/opt/odoo/odoo/addons-extra/inherit_crm_lead/models/crm_led.py",
		"/opt/odoo/odoo/addons-extra/iwesabe_partner_whatsapp/models/res_partner.py",
		"/opt/odoo/odoo/addons-extra/partner_types/res_partner.py",
		"/opt/odoo/odoo/addons-extra/sample_kit/models/sample_kit.py",
		"/opt/odoo/odoo/addons-extra/time_track/models/time_track.py",
		"/opt/odoo/odoo/addons-extra/sale_report/report_print.xml"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
			"*.py"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"forms",
			"hr_dashboard_view",
			"get_employee_info",
			"widget"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/deekshith/Downloads/Test JSON.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 817,
						"regions":
						{
						},
						"selection":
						[
							[
								817,
								817
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "products/models.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 803,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "products/apps.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 91,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 156511,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										174,
										179
									],
									[
										592,
										597
									],
									[
										879,
										884
									],
									[
										1249,
										1254
									],
									[
										1551,
										1556
									],
									[
										1811,
										1816
									],
									[
										1899,
										1904
									],
									[
										2115,
										2120
									],
									[
										2432,
										2437
									],
									[
										2511,
										2516
									],
									[
										2864,
										2869
									],
									[
										3085,
										3090
									],
									[
										3416,
										3421
									],
									[
										3685,
										3690
									],
									[
										3886,
										3891
									],
									[
										4283,
										4288
									],
									[
										4672,
										4677
									],
									[
										5086,
										5091
									],
									[
										5143,
										5148
									],
									[
										5198,
										5203
									],
									[
										5268,
										5273
									],
									[
										5332,
										5337
									],
									[
										5398,
										5403
									],
									[
										5463,
										5468
									],
									[
										5527,
										5532
									],
									[
										5587,
										5592
									],
									[
										5648,
										5653
									],
									[
										5707,
										5712
									],
									[
										5961,
										5966
									],
									[
										6019,
										6024
									],
									[
										6075,
										6080
									],
									[
										6146,
										6151
									],
									[
										6211,
										6216
									],
									[
										6278,
										6283
									],
									[
										6344,
										6349
									],
									[
										6409,
										6414
									],
									[
										6470,
										6475
									],
									[
										6532,
										6537
									],
									[
										6592,
										6597
									],
									[
										6845,
										6850
									],
									[
										6902,
										6907
									],
									[
										6957,
										6962
									],
									[
										7018,
										7023
									],
									[
										7078,
										7083
									],
									[
										7137,
										7142
									],
									[
										7195,
										7200
									],
									[
										7260,
										7265
									],
									[
										7324,
										7329
									],
									[
										7390,
										7395
									],
									[
										7454,
										7459
									],
									[
										7787,
										7792
									],
									[
										7839,
										7844
									],
									[
										7905,
										7910
									],
									[
										7937,
										7942
									],
									[
										8016,
										8021
									],
									[
										8138,
										8143
									],
									[
										8210,
										8215
									],
									[
										8476,
										8481
									],
									[
										8739,
										8744
									],
									[
										9098,
										9103
									],
									[
										9155,
										9160
									],
									[
										9411,
										9416
									],
									[
										9534,
										9539
									],
									[
										9579,
										9584
									],
									[
										9613,
										9618
									],
									[
										9671,
										9676
									],
									[
										9689,
										9694
									],
									[
										9760,
										9765
									],
									[
										9778,
										9783
									],
									[
										9980,
										9985
									],
									[
										10018,
										10023
									],
									[
										10280,
										10285
									],
									[
										10554,
										10559
									],
									[
										10799,
										10804
									],
									[
										11014,
										11019
									],
									[
										11047,
										11052
									],
									[
										11112,
										11117
									],
									[
										11236,
										11241
									],
									[
										11330,
										11335
									],
									[
										11516,
										11521
									],
									[
										11590,
										11595
									],
									[
										11801,
										11806
									],
									[
										12075,
										12080
									],
									[
										12254,
										12259
									],
									[
										12369,
										12374
									],
									[
										12431,
										12436
									],
									[
										12521,
										12526
									],
									[
										12686,
										12691
									],
									[
										12696,
										12701
									],
									[
										12883,
										12888
									],
									[
										12899,
										12904
									],
									[
										12911,
										12916
									],
									[
										13085,
										13090
									],
									[
										13331,
										13336
									],
									[
										13345,
										13350
									],
									[
										13422,
										13427
									],
									[
										13636,
										13641
									],
									[
										13650,
										13655
									],
									[
										13877,
										13882
									],
									[
										14129,
										14134
									],
									[
										14317,
										14322
									],
									[
										14465,
										14470
									],
									[
										14551,
										14556
									],
									[
										14762,
										14767
									],
									[
										14802,
										14807
									],
									[
										14810,
										14815
									],
									[
										14910,
										14915
									],
									[
										15037,
										15042
									],
									[
										15249,
										15254
									],
									[
										15414,
										15419
									],
									[
										15424,
										15429
									],
									[
										15645,
										15650
									],
									[
										15871,
										15876
									],
									[
										15974,
										15979
									],
									[
										16159,
										16164
									],
									[
										16165,
										16170
									],
									[
										16345,
										16350
									],
									[
										16351,
										16356
									],
									[
										16544,
										16549
									],
									[
										16591,
										16596
									],
									[
										16601,
										16606
									],
									[
										16730,
										16735
									],
									[
										16889,
										16894
									],
									[
										16953,
										16958
									],
									[
										17031,
										17036
									],
									[
										17200,
										17205
									],
									[
										17218,
										17223
									],
									[
										17270,
										17275
									],
									[
										17356,
										17361
									],
									[
										17627,
										17632
									],
									[
										17859,
										17864
									],
									[
										17865,
										17870
									],
									[
										17931,
										17936
									],
									[
										17974,
										17979
									],
									[
										17989,
										17994
									],
									[
										18067,
										18072
									],
									[
										18112,
										18117
									],
									[
										18393,
										18398
									],
									[
										18545,
										18550
									],
									[
										18732,
										18737
									],
									[
										18997,
										19002
									],
									[
										19174,
										19179
									],
									[
										19432,
										19437
									],
									[
										19613,
										19618
									],
									[
										19882,
										19887
									],
									[
										20009,
										20014
									],
									[
										20086,
										20091
									],
									[
										20280,
										20285
									],
									[
										20473,
										20478
									],
									[
										20561,
										20566
									],
									[
										20726,
										20731
									],
									[
										20969,
										20974
									],
									[
										21166,
										21171
									],
									[
										21339,
										21344
									],
									[
										21368,
										21373
									],
									[
										21436,
										21441
									],
									[
										21503,
										21508
									],
									[
										21575,
										21580
									],
									[
										21724,
										21729
									],
									[
										22013,
										22018
									],
									[
										22024,
										22029
									],
									[
										22063,
										22068
									],
									[
										22086,
										22091
									],
									[
										22486,
										22491
									],
									[
										22714,
										22719
									],
									[
										22920,
										22925
									],
									[
										22944,
										22949
									],
									[
										23011,
										23016
									],
									[
										23052,
										23057
									],
									[
										23085,
										23090
									],
									[
										23362,
										23367
									],
									[
										23391,
										23396
									],
									[
										23431,
										23436
									],
									[
										23569,
										23574
									],
									[
										23598,
										23603
									],
									[
										23642,
										23647
									],
									[
										23839,
										23844
									],
									[
										23881,
										23886
									],
									[
										23959,
										23964
									],
									[
										24120,
										24125
									],
									[
										24224,
										24229
									],
									[
										24513,
										24518
									],
									[
										24555,
										24560
									],
									[
										24704,
										24709
									],
									[
										24746,
										24751
									],
									[
										24924,
										24929
									],
									[
										24951,
										24956
									],
									[
										24969,
										24974
									],
									[
										25028,
										25033
									],
									[
										25046,
										25051
									],
									[
										25098,
										25103
									],
									[
										25259,
										25264
									],
									[
										25275,
										25280
									],
									[
										25340,
										25345
									],
									[
										25606,
										25611
									],
									[
										25721,
										25726
									],
									[
										25777,
										25782
									],
									[
										25790,
										25795
									],
									[
										25972,
										25977
									],
									[
										26002,
										26007
									],
									[
										26099,
										26104
									],
									[
										26148,
										26153
									],
									[
										26161,
										26166
									],
									[
										26171,
										26176
									],
									[
										26257,
										26262
									],
									[
										26351,
										26356
									],
									[
										26359,
										26364
									],
									[
										26640,
										26645
									],
									[
										26967,
										26972
									],
									[
										27045,
										27050
									],
									[
										27075,
										27080
									],
									[
										27111,
										27116
									],
									[
										27124,
										27129
									],
									[
										27134,
										27139
									],
									[
										27234,
										27239
									],
									[
										27261,
										27266
									],
									[
										27310,
										27315
									],
									[
										27447,
										27452
									],
									[
										27529,
										27534
									],
									[
										27575,
										27580
									],
									[
										27674,
										27679
									],
									[
										27749,
										27754
									],
									[
										27794,
										27799
									],
									[
										27822,
										27827
									],
									[
										27849,
										27854
									],
									[
										27893,
										27898
									],
									[
										28135,
										28140
									],
									[
										28333,
										28338
									],
									[
										28580,
										28585
									],
									[
										28596,
										28601
									],
									[
										28606,
										28611
									],
									[
										28696,
										28701
									],
									[
										28806,
										28811
									],
									[
										28826,
										28831
									],
									[
										29026,
										29031
									],
									[
										29213,
										29218
									],
									[
										29391,
										29396
									],
									[
										29577,
										29582
									],
									[
										29649,
										29654
									],
									[
										29730,
										29735
									],
									[
										29961,
										29966
									],
									[
										29976,
										29981
									],
									[
										30217,
										30222
									],
									[
										30270,
										30275
									],
									[
										30434,
										30439
									],
									[
										30762,
										30767
									],
									[
										31171,
										31176
									],
									[
										31243,
										31248
									],
									[
										31584,
										31589
									],
									[
										31784,
										31789
									],
									[
										32004,
										32009
									],
									[
										32085,
										32090
									],
									[
										32096,
										32101
									],
									[
										32149,
										32154
									],
									[
										32393,
										32398
									],
									[
										32627,
										32632
									],
									[
										32892,
										32897
									],
									[
										33054,
										33059
									],
									[
										33240,
										33245
									],
									[
										33434,
										33439
									],
									[
										33595,
										33600
									],
									[
										33764,
										33769
									],
									[
										33925,
										33930
									],
									[
										34097,
										34102
									],
									[
										34364,
										34369
									],
									[
										34527,
										34532
									],
									[
										34646,
										34651
									],
									[
										34807,
										34812
									],
									[
										34986,
										34991
									],
									[
										35152,
										35157
									],
									[
										35326,
										35331
									],
									[
										35497,
										35502
									],
									[
										35667,
										35672
									],
									[
										35803,
										35808
									],
									[
										36067,
										36072
									],
									[
										36246,
										36251
									],
									[
										36352,
										36357
									],
									[
										36556,
										36561
									],
									[
										36620,
										36625
									],
									[
										36628,
										36633
									],
									[
										36796,
										36801
									],
									[
										36860,
										36865
									],
									[
										36868,
										36873
									],
									[
										37267,
										37272
									],
									[
										37321,
										37326
									],
									[
										37354,
										37359
									],
									[
										37423,
										37428
									],
									[
										37697,
										37702
									],
									[
										38015,
										38020
									],
									[
										38258,
										38263
									],
									[
										38429,
										38434
									],
									[
										38584,
										38589
									],
									[
										38702,
										38707
									],
									[
										38883,
										38888
									],
									[
										39125,
										39130
									],
									[
										39228,
										39233
									],
									[
										39368,
										39373
									],
									[
										39456,
										39461
									],
									[
										39752,
										39757
									],
									[
										40031,
										40036
									],
									[
										40179,
										40184
									],
									[
										40336,
										40341
									],
									[
										40547,
										40552
									],
									[
										40626,
										40631
									],
									[
										40729,
										40734
									],
									[
										40955,
										40960
									],
									[
										41198,
										41203
									],
									[
										41390,
										41395
									],
									[
										41562,
										41567
									],
									[
										41594,
										41599
									],
									[
										41779,
										41784
									],
									[
										42019,
										42024
									],
									[
										42098,
										42103
									],
									[
										42270,
										42275
									],
									[
										42390,
										42395
									],
									[
										42556,
										42561
									],
									[
										42856,
										42861
									],
									[
										42963,
										42968
									],
									[
										43189,
										43194
									],
									[
										43387,
										43392
									],
									[
										43580,
										43585
									],
									[
										43655,
										43660
									],
									[
										43850,
										43855
									],
									[
										43933,
										43938
									],
									[
										44190,
										44195
									],
									[
										44553,
										44558
									],
									[
										44801,
										44806
									],
									[
										45205,
										45210
									],
									[
										45248,
										45253
									],
									[
										45271,
										45276
									],
									[
										45414,
										45419
									],
									[
										45457,
										45462
									],
									[
										45609,
										45614
									],
									[
										45636,
										45641
									],
									[
										45735,
										45740
									],
									[
										46025,
										46030
									],
									[
										46040,
										46045
									],
									[
										46253,
										46258
									],
									[
										46527,
										46532
									],
									[
										46556,
										46561
									],
									[
										46591,
										46596
									],
									[
										46620,
										46625
									],
									[
										46674,
										46679
									],
									[
										46691,
										46696
									],
									[
										46729,
										46734
									],
									[
										46847,
										46852
									],
									[
										46927,
										46932
									],
									[
										46952,
										46957
									],
									[
										47249,
										47254
									],
									[
										47464,
										47469
									],
									[
										47479,
										47484
									],
									[
										47583,
										47588
									],
									[
										47591,
										47596
									],
									[
										47831,
										47836
									],
									[
										47870,
										47875
									],
									[
										47912,
										47917
									],
									[
										47978,
										47983
									],
									[
										48165,
										48170
									],
									[
										48433,
										48438
									],
									[
										48587,
										48592
									],
									[
										48622,
										48627
									],
									[
										48822,
										48827
									],
									[
										49137,
										49142
									],
									[
										49423,
										49428
									],
									[
										49777,
										49782
									],
									[
										50112,
										50117
									],
									[
										50420,
										50425
									],
									[
										50744,
										50749
									],
									[
										51040,
										51045
									],
									[
										51305,
										51310
									],
									[
										51598,
										51603
									],
									[
										51891,
										51896
									],
									[
										52057,
										52062
									],
									[
										52219,
										52224
									],
									[
										52386,
										52391
									],
									[
										52552,
										52557
									],
									[
										52735,
										52740
									],
									[
										52923,
										52928
									],
									[
										53116,
										53121
									],
									[
										53320,
										53325
									],
									[
										53509,
										53514
									],
									[
										53697,
										53702
									],
									[
										53921,
										53926
									],
									[
										54225,
										54230
									],
									[
										54512,
										54517
									],
									[
										54762,
										54767
									],
									[
										55068,
										55073
									],
									[
										55354,
										55359
									],
									[
										55660,
										55665
									],
									[
										56085,
										56090
									],
									[
										56361,
										56366
									],
									[
										56690,
										56695
									],
									[
										56923,
										56928
									],
									[
										57189,
										57194
									],
									[
										57381,
										57386
									],
									[
										57578,
										57583
									],
									[
										57722,
										57727
									],
									[
										57887,
										57892
									],
									[
										57980,
										57985
									],
									[
										58097,
										58102
									],
									[
										58359,
										58364
									],
									[
										58729,
										58734
									],
									[
										58899,
										58904
									],
									[
										59087,
										59092
									],
									[
										59270,
										59275
									],
									[
										59457,
										59462
									],
									[
										59637,
										59642
									],
									[
										59876,
										59881
									],
									[
										60051,
										60056
									],
									[
										60241,
										60246
									],
									[
										60378,
										60383
									],
									[
										60665,
										60670
									],
									[
										60838,
										60843
									],
									[
										60978,
										60983
									],
									[
										61246,
										61251
									],
									[
										61367,
										61372
									],
									[
										61526,
										61531
									],
									[
										61702,
										61707
									],
									[
										62029,
										62034
									],
									[
										62096,
										62101
									],
									[
										62249,
										62254
									],
									[
										62524,
										62529
									],
									[
										62737,
										62742
									],
									[
										62960,
										62965
									],
									[
										63180,
										63185
									],
									[
										63391,
										63396
									],
									[
										63767,
										63772
									],
									[
										64112,
										64117
									],
									[
										64456,
										64461
									],
									[
										64782,
										64787
									],
									[
										64825,
										64830
									],
									[
										65068,
										65073
									],
									[
										65261,
										65266
									],
									[
										65334,
										65339
									],
									[
										65695,
										65700
									],
									[
										65929,
										65934
									],
									[
										66167,
										66172
									],
									[
										66504,
										66509
									],
									[
										66930,
										66935
									],
									[
										67291,
										67296
									],
									[
										67635,
										67640
									],
									[
										68046,
										68051
									],
									[
										68395,
										68400
									],
									[
										68719,
										68724
									],
									[
										68762,
										68767
									],
									[
										68798,
										68803
									],
									[
										68861,
										68866
									],
									[
										68905,
										68910
									],
									[
										69286,
										69291
									],
									[
										69309,
										69314
									],
									[
										69359,
										69364
									],
									[
										69431,
										69436
									],
									[
										69619,
										69624
									],
									[
										69838,
										69843
									],
									[
										70120,
										70125
									],
									[
										70458,
										70463
									],
									[
										70686,
										70691
									],
									[
										70755,
										70760
									],
									[
										70798,
										70803
									],
									[
										70834,
										70839
									],
									[
										70897,
										70902
									],
									[
										70976,
										70981
									],
									[
										71042,
										71047
									],
									[
										71252,
										71257
									],
									[
										71580,
										71585
									],
									[
										71883,
										71888
									],
									[
										72184,
										72189
									],
									[
										72485,
										72490
									],
									[
										72786,
										72791
									],
									[
										73102,
										73107
									],
									[
										73316,
										73321
									],
									[
										73598,
										73603
									],
									[
										73906,
										73911
									],
									[
										74136,
										74141
									],
									[
										74342,
										74347
									],
									[
										74651,
										74656
									],
									[
										74856,
										74861
									],
									[
										75115,
										75120
									],
									[
										75300,
										75305
									],
									[
										75468,
										75473
									],
									[
										75669,
										75674
									],
									[
										75895,
										75900
									],
									[
										76101,
										76106
									],
									[
										76325,
										76330
									],
									[
										76507,
										76512
									],
									[
										76719,
										76724
									],
									[
										76959,
										76964
									],
									[
										77305,
										77310
									],
									[
										77508,
										77513
									],
									[
										77707,
										77712
									],
									[
										77888,
										77893
									],
									[
										78112,
										78117
									],
									[
										78300,
										78305
									],
									[
										78536,
										78541
									],
									[
										78811,
										78816
									],
									[
										79115,
										79120
									],
									[
										79359,
										79364
									],
									[
										79659,
										79664
									],
									[
										80092,
										80097
									],
									[
										80535,
										80540
									],
									[
										80619,
										80624
									],
									[
										81009,
										81014
									],
									[
										81271,
										81276
									],
									[
										81493,
										81498
									],
									[
										81841,
										81846
									],
									[
										82113,
										82118
									],
									[
										82166,
										82171
									],
									[
										82215,
										82220
									],
									[
										82221,
										82226
									],
									[
										82263,
										82268
									],
									[
										82269,
										82274
									],
									[
										82314,
										82319
									],
									[
										82363,
										82368
									],
									[
										82539,
										82544
									],
									[
										82598,
										82603
									],
									[
										82990,
										82995
									],
									[
										83044,
										83049
									],
									[
										83125,
										83130
									],
									[
										83555,
										83560
									],
									[
										83979,
										83984
									],
									[
										84041,
										84046
									],
									[
										84172,
										84177
									],
									[
										84252,
										84257
									],
									[
										84600,
										84605
									],
									[
										84808,
										84813
									],
									[
										84845,
										84850
									],
									[
										84911,
										84916
									],
									[
										84959,
										84964
									],
									[
										85202,
										85207
									],
									[
										85213,
										85218
									],
									[
										85314,
										85319
									],
									[
										85358,
										85363
									],
									[
										85402,
										85407
									],
									[
										85446,
										85451
									],
									[
										85571,
										85576
									],
									[
										85582,
										85587
									],
									[
										85660,
										85665
									],
									[
										85671,
										85676
									],
									[
										85869,
										85874
									],
									[
										86025,
										86030
									],
									[
										86183,
										86188
									],
									[
										86262,
										86267
									],
									[
										86432,
										86437
									],
									[
										86514,
										86519
									],
									[
										86616,
										86621
									],
									[
										86853,
										86858
									],
									[
										87090,
										87095
									],
									[
										87104,
										87109
									],
									[
										87416,
										87421
									],
									[
										87572,
										87577
									],
									[
										87631,
										87636
									],
									[
										87651,
										87656
									],
									[
										87855,
										87860
									],
									[
										87911,
										87916
									],
									[
										87927,
										87932
									],
									[
										87963,
										87968
									],
									[
										88019,
										88024
									],
									[
										88068,
										88073
									],
									[
										88162,
										88167
									],
									[
										88194,
										88199
									],
									[
										88451,
										88456
									],
									[
										88530,
										88535
									],
									[
										88587,
										88592
									],
									[
										88630,
										88635
									],
									[
										88746,
										88751
									],
									[
										88893,
										88898
									],
									[
										89042,
										89047
									],
									[
										89277,
										89282
									],
									[
										89543,
										89548
									],
									[
										89556,
										89561
									],
									[
										89735,
										89740
									],
									[
										89806,
										89811
									],
									[
										89997,
										90002
									],
									[
										90061,
										90066
									],
									[
										90075,
										90080
									],
									[
										90114,
										90119
									],
									[
										90198,
										90203
									],
									[
										90260,
										90265
									],
									[
										90274,
										90279
									],
									[
										90313,
										90318
									],
									[
										90515,
										90520
									],
									[
										90751,
										90756
									],
									[
										90810,
										90815
									],
									[
										90858,
										90863
									],
									[
										91149,
										91154
									],
									[
										91487,
										91492
									],
									[
										91585,
										91590
									],
									[
										91864,
										91869
									],
									[
										92221,
										92226
									],
									[
										92553,
										92558
									],
									[
										92767,
										92772
									],
									[
										92989,
										92994
									],
									[
										93187,
										93192
									],
									[
										93200,
										93205
									],
									[
										93434,
										93439
									],
									[
										93712,
										93717
									],
									[
										93893,
										93898
									],
									[
										94107,
										94112
									],
									[
										94181,
										94186
									],
									[
										94234,
										94239
									],
									[
										94436,
										94441
									],
									[
										94641,
										94646
									],
									[
										94677,
										94682
									],
									[
										94697,
										94702
									],
									[
										94845,
										94850
									],
									[
										95140,
										95145
									],
									[
										95377,
										95382
									],
									[
										95440,
										95445
									],
									[
										95521,
										95526
									],
									[
										95669,
										95674
									],
									[
										95684,
										95689
									],
									[
										95821,
										95826
									],
									[
										95883,
										95888
									],
									[
										95963,
										95968
									],
									[
										96173,
										96178
									],
									[
										96405,
										96410
									],
									[
										96654,
										96659
									],
									[
										96958,
										96963
									],
									[
										97089,
										97094
									],
									[
										97127,
										97132
									],
									[
										97309,
										97314
									],
									[
										97320,
										97325
									],
									[
										97440,
										97445
									],
									[
										97478,
										97483
									],
									[
										97629,
										97634
									],
									[
										97755,
										97760
									],
									[
										97922,
										97927
									],
									[
										98040,
										98045
									],
									[
										98110,
										98115
									],
									[
										98157,
										98162
									],
									[
										98271,
										98276
									],
									[
										98342,
										98347
									],
									[
										98390,
										98395
									],
									[
										98505,
										98510
									],
									[
										98539,
										98544
									],
									[
										98561,
										98566
									],
									[
										98573,
										98578
									],
									[
										98772,
										98777
									],
									[
										98980,
										98985
									],
									[
										99348,
										99353
									],
									[
										99359,
										99364
									],
									[
										99414,
										99419
									],
									[
										99460,
										99465
									],
									[
										99471,
										99476
									],
									[
										99532,
										99537
									],
									[
										99543,
										99548
									],
									[
										99575,
										99580
									],
									[
										99843,
										99848
									],
									[
										99901,
										99906
									],
									[
										99907,
										99912
									],
									[
										99976,
										99981
									],
									[
										99982,
										99987
									],
									[
										100002,
										100007
									],
									[
										100011,
										100016
									],
									[
										100046,
										100051
									],
									[
										100094,
										100099
									],
									[
										100365,
										100370
									],
									[
										100381,
										100386
									],
									[
										100410,
										100415
									],
									[
										100438,
										100443
									],
									[
										100530,
										100535
									],
									[
										100709,
										100714
									],
									[
										100811,
										100816
									],
									[
										100823,
										100828
									],
									[
										100863,
										100868
									],
									[
										101029,
										101034
									],
									[
										101183,
										101188
									],
									[
										101215,
										101220
									],
									[
										101490,
										101495
									],
									[
										101772,
										101777
									],
									[
										101982,
										101987
									],
									[
										102082,
										102087
									],
									[
										102303,
										102308
									],
									[
										102405,
										102410
									],
									[
										102436,
										102441
									],
									[
										102463,
										102468
									],
									[
										102494,
										102499
									],
									[
										102535,
										102540
									],
									[
										102585,
										102590
									],
									[
										102895,
										102900
									],
									[
										102992,
										102997
									],
									[
										103275,
										103280
									],
									[
										103556,
										103561
									],
									[
										103651,
										103656
									],
									[
										103682,
										103687
									],
									[
										103728,
										103733
									],
									[
										103979,
										103984
									],
									[
										104173,
										104178
									],
									[
										104484,
										104489
									],
									[
										104676,
										104681
									],
									[
										104914,
										104919
									],
									[
										105018,
										105023
									],
									[
										105114,
										105119
									],
									[
										105131,
										105136
									],
									[
										105539,
										105544
									],
									[
										105834,
										105839
									],
									[
										106142,
										106147
									],
									[
										106152,
										106157
									],
									[
										106174,
										106179
									],
									[
										106413,
										106418
									],
									[
										106453,
										106458
									],
									[
										106492,
										106497
									],
									[
										106594,
										106599
									],
									[
										106611,
										106616
									],
									[
										106637,
										106642
									],
									[
										107032,
										107037
									],
									[
										107271,
										107276
									],
									[
										107434,
										107439
									],
									[
										107520,
										107525
									],
									[
										107538,
										107543
									],
									[
										107874,
										107879
									],
									[
										108108,
										108113
									],
									[
										108118,
										108123
									],
									[
										108276,
										108281
									],
									[
										108291,
										108296
									],
									[
										108335,
										108340
									],
									[
										108369,
										108374
									],
									[
										108625,
										108630
									],
									[
										108795,
										108800
									],
									[
										109011,
										109016
									],
									[
										109253,
										109258
									],
									[
										109517,
										109522
									],
									[
										109697,
										109702
									],
									[
										109839,
										109844
									],
									[
										109981,
										109986
									],
									[
										110118,
										110123
									],
									[
										110263,
										110268
									],
									[
										110470,
										110475
									],
									[
										110591,
										110596
									],
									[
										110800,
										110805
									],
									[
										110993,
										110998
									],
									[
										111170,
										111175
									],
									[
										111379,
										111384
									],
									[
										111551,
										111556
									],
									[
										111719,
										111724
									],
									[
										111871,
										111876
									],
									[
										112077,
										112082
									],
									[
										112146,
										112151
									],
									[
										112375,
										112380
									],
									[
										112443,
										112448
									],
									[
										112610,
										112615
									],
									[
										112688,
										112693
									],
									[
										112914,
										112919
									],
									[
										113103,
										113108
									],
									[
										113400,
										113405
									],
									[
										113668,
										113673
									],
									[
										114018,
										114023
									],
									[
										114414,
										114419
									],
									[
										114767,
										114772
									],
									[
										115119,
										115124
									],
									[
										115336,
										115341
									],
									[
										115361,
										115366
									],
									[
										115740,
										115745
									],
									[
										116020,
										116025
									],
									[
										116049,
										116054
									],
									[
										116183,
										116188
									],
									[
										116415,
										116420
									],
									[
										116507,
										116512
									],
									[
										116588,
										116593
									],
									[
										116733,
										116738
									],
									[
										116742,
										116747
									],
									[
										116822,
										116827
									],
									[
										116831,
										116836
									],
									[
										117034,
										117039
									],
									[
										117244,
										117249
									],
									[
										117375,
										117380
									],
									[
										117384,
										117389
									],
									[
										117519,
										117524
									],
									[
										117620,
										117625
									],
									[
										117805,
										117810
									],
									[
										117912,
										117917
									],
									[
										118082,
										118087
									],
									[
										118091,
										118096
									],
									[
										118281,
										118286
									],
									[
										118394,
										118399
									],
									[
										118596,
										118601
									],
									[
										118763,
										118768
									],
									[
										118927,
										118932
									],
									[
										119106,
										119111
									],
									[
										119209,
										119214
									],
									[
										119398,
										119403
									],
									[
										119555,
										119560
									],
									[
										119652,
										119657
									],
									[
										119708,
										119713
									],
									[
										119760,
										119765
									],
									[
										120037,
										120042
									],
									[
										120406,
										120411
									],
									[
										120673,
										120678
									],
									[
										121006,
										121011
									],
									[
										121219,
										121224
									],
									[
										121643,
										121648
									],
									[
										121898,
										121903
									],
									[
										122317,
										122322
									],
									[
										122549,
										122554
									],
									[
										122705,
										122710
									],
									[
										122931,
										122936
									],
									[
										122960,
										122965
									],
									[
										123206,
										123211
									],
									[
										123359,
										123364
									],
									[
										123482,
										123487
									],
									[
										123788,
										123793
									],
									[
										124074,
										124079
									],
									[
										124368,
										124373
									],
									[
										124434,
										124439
									],
									[
										124711,
										124716
									],
									[
										124832,
										124837
									],
									[
										124959,
										124964
									],
									[
										125152,
										125157
									],
									[
										125277,
										125282
									],
									[
										125394,
										125399
									],
									[
										125491,
										125496
									],
									[
										125515,
										125520
									],
									[
										125721,
										125726
									],
									[
										125731,
										125736
									],
									[
										125891,
										125896
									],
									[
										125901,
										125906
									],
									[
										126069,
										126074
									],
									[
										126079,
										126084
									],
									[
										126384,
										126389
									],
									[
										126763,
										126768
									],
									[
										127125,
										127130
									],
									[
										127296,
										127301
									],
									[
										127509,
										127514
									],
									[
										127657,
										127662
									],
									[
										127839,
										127844
									],
									[
										128043,
										128048
									],
									[
										128356,
										128361
									],
									[
										128603,
										128608
									],
									[
										128880,
										128885
									],
									[
										129143,
										129148
									],
									[
										129173,
										129178
									],
									[
										129386,
										129391
									],
									[
										129574,
										129579
									],
									[
										129891,
										129896
									],
									[
										130275,
										130280
									],
									[
										130655,
										130660
									],
									[
										130872,
										130877
									],
									[
										131277,
										131282
									],
									[
										131583,
										131588
									],
									[
										131914,
										131919
									],
									[
										132291,
										132296
									],
									[
										132478,
										132483
									],
									[
										132860,
										132865
									],
									[
										133274,
										133279
									],
									[
										133536,
										133541
									],
									[
										133821,
										133826
									],
									[
										134215,
										134220
									],
									[
										134376,
										134381
									],
									[
										134635,
										134640
									],
									[
										134777,
										134782
									],
									[
										134794,
										134799
									],
									[
										134885,
										134890
									],
									[
										135079,
										135084
									],
									[
										135196,
										135201
									],
									[
										135395,
										135400
									],
									[
										135675,
										135680
									],
									[
										135850,
										135855
									],
									[
										135867,
										135872
									],
									[
										136056,
										136061
									],
									[
										136267,
										136272
									],
									[
										136472,
										136477
									],
									[
										136489,
										136494
									],
									[
										136617,
										136622
									],
									[
										136749,
										136754
									],
									[
										136914,
										136919
									],
									[
										137108,
										137113
									],
									[
										137318,
										137323
									],
									[
										137405,
										137410
									],
									[
										137465,
										137470
									],
									[
										137761,
										137766
									],
									[
										137935,
										137940
									],
									[
										138120,
										138125
									],
									[
										138297,
										138302
									],
									[
										138492,
										138497
									],
									[
										138737,
										138742
									],
									[
										139136,
										139141
									],
									[
										139394,
										139399
									],
									[
										139628,
										139633
									],
									[
										139883,
										139888
									],
									[
										140106,
										140111
									],
									[
										140444,
										140449
									],
									[
										140773,
										140778
									],
									[
										141185,
										141190
									],
									[
										141359,
										141364
									],
									[
										141544,
										141549
									],
									[
										141721,
										141726
									],
									[
										141916,
										141921
									],
									[
										142161,
										142166
									],
									[
										142509,
										142514
									],
									[
										142710,
										142715
									],
									[
										142922,
										142927
									],
									[
										143069,
										143074
									],
									[
										143250,
										143255
									],
									[
										143473,
										143478
									],
									[
										143875,
										143880
									],
									[
										144118,
										144123
									],
									[
										144148,
										144153
									],
									[
										144332,
										144337
									],
									[
										144621,
										144626
									],
									[
										145048,
										145053
									],
									[
										145393,
										145398
									],
									[
										145605,
										145610
									],
									[
										145696,
										145701
									],
									[
										146006,
										146011
									],
									[
										146267,
										146272
									],
									[
										146466,
										146471
									],
									[
										146608,
										146613
									],
									[
										146873,
										146878
									],
									[
										147051,
										147056
									],
									[
										147370,
										147375
									],
									[
										147571,
										147576
									],
									[
										147783,
										147788
									],
									[
										147930,
										147935
									],
									[
										148111,
										148116
									],
									[
										148334,
										148339
									],
									[
										148736,
										148741
									],
									[
										148979,
										148984
									],
									[
										149009,
										149014
									],
									[
										149193,
										149198
									],
									[
										149482,
										149487
									],
									[
										149909,
										149914
									],
									[
										150232,
										150237
									],
									[
										150393,
										150398
									],
									[
										150593,
										150598
									],
									[
										150665,
										150670
									],
									[
										150810,
										150815
									],
									[
										150923,
										150928
									],
									[
										151115,
										151120
									],
									[
										151324,
										151329
									],
									[
										151407,
										151412
									],
									[
										151518,
										151523
									],
									[
										151626,
										151631
									],
									[
										151709,
										151714
									],
									[
										151851,
										151856
									],
									[
										151999,
										152004
									],
									[
										152223,
										152228
									],
									[
										152378,
										152383
									],
									[
										152589,
										152594
									],
									[
										152866,
										152871
									],
									[
										153078,
										153083
									],
									[
										153144,
										153149
									],
									[
										153457,
										153462
									],
									[
										153557,
										153562
									],
									[
										153666,
										153671
									],
									[
										153759,
										153764
									],
									[
										153801,
										153806
									],
									[
										153847,
										153852
									],
									[
										154076,
										154081
									],
									[
										154093,
										154098
									],
									[
										154166,
										154171
									],
									[
										154185,
										154190
									],
									[
										154229,
										154234
									],
									[
										154250,
										154255
									],
									[
										154491,
										154496
									],
									[
										154726,
										154731
									],
									[
										154970,
										154975
									],
									[
										155076,
										155081
									],
									[
										155251,
										155256
									],
									[
										155314,
										155319
									],
									[
										155361,
										155366
									],
									[
										155548,
										155553
									],
									[
										155771,
										155776
									],
									[
										155991,
										155996
									],
									[
										156302,
										156307
									],
									[
										156434,
										156439
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 3495.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "products/views.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1386,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/deekshith/Downloads/Test JSON (1).json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 817,
						"regions":
						{
						},
						"selection":
						[
							[
								411,
								411
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "products/admin.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 252,
						"regions":
						{
						},
						"selection":
						[
							[
								86,
								86
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "trydjango.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 295.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
